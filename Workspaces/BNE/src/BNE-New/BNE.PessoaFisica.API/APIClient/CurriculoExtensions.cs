// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BNE.PessoaFisica.API
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Curriculo.
    /// </summary>
    public static partial class CurriculoExtensions
    {
            /// <summary>
            /// Cadastra um mini-currículo para a pessoa física
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static CadastroCurriculoResponse Cadastrar(this ICurriculo operations, SalvarCurriculoCommand command)
            {
                return operations.CadastrarAsync(command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cadastra um mini-currículo para a pessoa física
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CadastroCurriculoResponse> CadastrarAsync(this ICurriculo operations, SalvarCurriculoCommand command, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CadastrarWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cadastrar Experiencia Profissional do Candidato
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static ExperienciaProfissionalResponse CadastrarExperienciaProfissional(this ICurriculo operations, SalvarExperienciaProfissionalCommand command)
            {
                return operations.CadastrarExperienciaProfissionalAsync(command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cadastrar Experiencia Profissional do Candidato
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExperienciaProfissionalResponse> CadastrarExperienciaProfissionalAsync(this ICurriculo operations, SalvarExperienciaProfissionalCommand command, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CadastrarExperienciaProfissionalWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cadastrar Formacao Profissional do Candidato
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static FormacaoResponse CadastrarFormacao(this ICurriculo operations, SalvarFormacaoCommand command)
            {
                return operations.CadastrarFormacaoAsync(command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cadastrar Formacao Profissional do Candidato
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FormacaoResponse> CadastrarFormacaoAsync(this ICurriculo operations, SalvarFormacaoCommand command, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CadastrarFormacaoWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Candidatura de um curriculo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            public static CandidaturaResponse Candidatar(this ICurriculo operations, SalvarCurriculoCommand command)
            {
                return operations.CandidatarAsync(command).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Candidatura de um curriculo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='command'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CandidaturaResponse> CandidatarAsync(this ICurriculo operations, SalvarCurriculoCommand command, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CandidatarWithHttpMessagesAsync(command, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recuperar as informações relacionadas ao currículo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            /// <param name='data'>
            /// </param>
            public static CandidaturaDegustacao GetCadidaturasDegustacao(this ICurriculo operations, decimal? cPF = default(decimal?), System.DateTime? data = default(System.DateTime?))
            {
                return operations.GetCadidaturasDegustacaoAsync(cPF, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recuperar as informações relacionadas ao currículo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CandidaturaDegustacao> GetCadidaturasDegustacaoAsync(this ICurriculo operations, decimal? cPF = default(decimal?), System.DateTime? data = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCadidaturasDegustacaoWithHttpMessagesAsync(cPF, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recupera informações do currículo do bne e possível candidatura na vaga
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            public static InformacaoCurriculoResponse GetInformacoesCurriculo(this ICurriculo operations, decimal? cPF = default(decimal?), int? idVaga = default(int?))
            {
                return operations.GetInformacoesCurriculoAsync(cPF, idVaga).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera informações do currículo do bne e possível candidatura na vaga
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InformacaoCurriculoResponse> GetInformacoesCurriculoAsync(this ICurriculo operations, decimal? cPF = default(decimal?), int? idVaga = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInformacoesCurriculoWithHttpMessagesAsync(cPF, idVaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
