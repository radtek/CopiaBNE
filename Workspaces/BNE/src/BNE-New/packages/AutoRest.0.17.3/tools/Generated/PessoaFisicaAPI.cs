// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace 
{
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// This API provides all operation to BNE solution.
    /// </summary>
    public partial class PessoaFisicaAPI : Microsoft.Rest.ServiceClient<PessoaFisicaAPI>, IPessoaFisicaAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the ICodigoConfirmacaoEmail.
        /// </summary>
        public virtual ICodigoConfirmacaoEmail CodigoConfirmacaoEmail { get; private set; }

        /// <summary>
        /// Gets the ICurriculo.
        /// </summary>
        public virtual ICurriculo Curriculo { get; private set; }

        /// <summary>
        /// Gets the ICurso.
        /// </summary>
        public virtual ICurso Curso { get; private set; }

        /// <summary>
        /// Gets the IDadosEmpresa.
        /// </summary>
        public virtual IDadosEmpresa DadosEmpresa { get; private set; }

        /// <summary>
        /// Gets the IInstituicaoEnsino.
        /// </summary>
        public virtual IInstituicaoEnsino InstituicaoEnsino { get; private set; }

        /// <summary>
        /// Gets the INavegacaoVaga.
        /// </summary>
        public virtual INavegacaoVaga NavegacaoVaga { get; private set; }

        /// <summary>
        /// Gets the IParametro.
        /// </summary>
        public virtual IParametro Parametro { get; private set; }

        /// <summary>
        /// Gets the IPessoaFisica.
        /// </summary>
        public virtual IPessoaFisica PessoaFisica { get; private set; }

        /// <summary>
        /// Gets the IPlano.
        /// </summary>
        public virtual IPlano Plano { get; private set; }

        /// <summary>
        /// Gets the IPreCurriculo.
        /// </summary>
        public virtual IPreCurriculo PreCurriculo { get; private set; }

        /// <summary>
        /// Gets the IRamoAtividade.
        /// </summary>
        public virtual IRamoAtividade RamoAtividade { get; private set; }

        /// <summary>
        /// Gets the IRankingEmail.
        /// </summary>
        public virtual IRankingEmail RankingEmail { get; private set; }

        /// <summary>
        /// Gets the IVaga.
        /// </summary>
        public virtual IVaga Vaga { get; private set; }

        /// <summary>
        /// Gets the IVagaPergunta.
        /// </summary>
        public virtual IVagaPergunta VagaPergunta { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PessoaFisicaAPI class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PessoaFisicaAPI(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PessoaFisicaAPI class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public PessoaFisicaAPI(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PessoaFisicaAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PessoaFisicaAPI(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PessoaFisicaAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PessoaFisicaAPI(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.CodigoConfirmacaoEmail = new CodigoConfirmacaoEmail(this);
            this.Curriculo = new Curriculo(this);
            this.Curso = new Curso(this);
            this.DadosEmpresa = new DadosEmpresa(this);
            this.InstituicaoEnsino = new InstituicaoEnsino(this);
            this.NavegacaoVaga = new NavegacaoVaga(this);
            this.Parametro = new Parametro(this);
            this.PessoaFisica = new PessoaFisica(this);
            this.Plano = new Plano(this);
            this.PreCurriculo = new PreCurriculo(this);
            this.RamoAtividade = new RamoAtividade(this);
            this.RankingEmail = new RankingEmail(this);
            this.Vaga = new Vaga(this);
            this.VagaPergunta = new VagaPergunta(this);
            this.BaseUri = new System.Uri("http://localhost:51218");
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new  System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
