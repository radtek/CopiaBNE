// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace 
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Plano.
    /// </summary>
    public static partial class PlanoExtensions
    {
            /// <summary>
            /// Recupera um plano
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            public static PlanoResponse GetPlano(this IPlano operations, decimal? cPF = default(decimal?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IPlano)s).GetPlanoAsync(cPF), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera um plano
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cPF'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PlanoResponse> GetPlanoAsync(this IPlano operations, decimal? cPF = default(decimal?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPlanoWithHttpMessagesAsync(cPF, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
