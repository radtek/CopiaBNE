using BNE.BLL;
using BNE.BLL.AsyncServices;
using BNE.Services.Base.ProcessosAssincronos;
using System;
using TipoAtividade = BNE.BLL.AsyncServices.Enumeradores.TipoAtividade;

namespace BNE.Services.AsyncExecutor.Console
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine("Digite a mensagem que deve ser enfileirada novamente: ");
            var mensagens = System.Console.ReadLine(); //"29646787,29646788,29646789,29646779,29646780,29646781,29646782,29646785,29646786,29646731,29646732,29646733,29646735,29646738,29646740,29646741,29646742,29646743,29646745,29646747,29646750,29646753,29646754,29646755,29646756,29646757,29646758,29646759,29646760,29646667,29646668,29646669,29646670,29646672,29646674,29646675,29646679,29646680,29646681,29646682,29646683,29646684,29646685,29646686,29646687,29646688,29646689,29646692,29646693,29646694,29646695,29646696,29646705,29646706,29646707,29646708,29646709,29646710,29646711,29646712,29646713,29646714,29646715,29646716,29646718,29646719,29646720,29646721,29646722,29646726,29646727,29646730,29646543,29646544,29646546,29646548,29646551,29646554,29646556,29646558,29646559,29646560,29646561,29646562,29646563,29646564,29646567,29646573,29646574,29646575,29646578,29646579,29646580,29646581,29646582,29646584,29646589,29646592,29646593,29646594,29646595,29646597,29646606,29646610,29646611,29646612,29646613,29646614,29646615,29646616,29646617,29646618,29646619,29646624,29646626,29646632,29646635,29646636,29646637,29646641,29646642,29646643,29646645,29646646,29646647,29646651,29646653,29646654,29646656,29646658,29646659,29646660,29646663,29646664,29646665,29646666,29646289,29646290,29646291,29646297,29646300,29646304,29646305,29646308,29646311,29646316,29646320,29646324,29646327,29646332,29646335,29646336,29646341,29646345,29646348,29646349,29646353,29646357,29646358,29646360,29646361,29646365,29646369,29646372,29646374,29646379,29646381,29646383,29646384,29646391,29646395,29646396,29646398,29646402,29646406,29646407,29646410,29646411,29646412,29646414,29646418,29646421,29646424,29646431,29646436,29646444,29646446,29646448,29646450,29646454,29646458,29646461,29646470,29646472,29646480,29646481,29646483,29646487,29646489,29646492,29646496,29646498,29646500,29646501,29646502,29646505,29646506,29646510,29646521,29646522,29646523,29646525,29646527,29646528,29646529,29646532,29646534,29645771,29645773,29645781,29645784,29645785,29645787,29645789,29645790,29645792,29645793,29645794,29645796,29645798,29645802,29645804,29645807,29645808,29645816,29645820,29645821,29645823,29645824,29645828,29645832,29645837,29645838,29645839,29645840,29645849,29645850,29645855,29645857,29645858,29645859,29645861,29645862,29645863,29645864,29645865,29645867,29645869,29645875,29645879,29645881,29645882,29645885,29645886,29645887,29645889,29645892,29645899,29645900,29645902,29645904,29645905,29645908,29645911,29645914,29645918,29645924,29645925,29645926,29645927,29645930,29645931,29645936,29645937,29645938,29645939,29645941,29645942,29645944,29645947,29645953,29645954,29645956,29645959,29645962,29645964,29645965,29645966,29645968,29645973,29645975,29645977,29645978,29645979,29645985,29645988,29645991,29645992,29645993,29645996,29645997,29645999,29646000,29646003,29646004,29646006,29646007,29646009,29646012,29646013,29646014,29646016,29646018,29646020,29646021,29646022,29646023,29646024,29646026,29646028,29646029,29646031,29646037,29646039,29646043,29646046,29646054,29646055,29646057,29646062,29646063,29646064,29646068,29646070,29646071,29646073,29646074,29646076,29646077,29646081,29646083,29646085,29646086,29646087,29646092,29646094,29646095,29646097,29646102,29646105,29646109,29646121,29646127,29646128,29646130,29646131,29646140,29646143,29646145,29646148,29646150,29646151,29646153,29646159,29646163,29646164,29646169,29646170,29646173,29646177,29646178,29646179,29646182,29646185,29646187,29646188,29646194,29646196,29646203,29646206,29646211,29646213,29646220,29646226,29646231,29646232,29646234,29646236,29646238,29646239,29646242,29646243,29646244,29646247,29646253,29646255,29646267,29646271,29646273,29646275,29646280,29646282,29644855,29644859,29644860,29644861,29644862,29644863,29644906,29644911,29645124,29645416,29645729,29645730,29645731,29645734,29645739,29645741,29645743,29645745,29645747,29645749,29645751,29645753,29645754,29645756,29645757,29645759,29645760,29645763,29645764,29645769,29645770";
            foreach (var mensagem in mensagens.Split(','))
            {
                var objMensagem = MensagemCS.LoadObject(Convert.ToInt32(mensagem));

                #region Envio para o Assíncrono
                var parametros = new ParametroExecucaoCollection
                            {
                                {"idMensagem", "Mensagem", objMensagem.IdMensagemCS.ToString(), objMensagem.IdMensagemCS.ToString()},
                                {"emailRemetente", "Remetente", objMensagem.DescricaoEmailRemetente, objMensagem.DescricaoEmailRemetente},
                                {"emailDestinatario", "Destinatário", objMensagem.DescricaoEmailDestinatario, objMensagem.DescricaoEmailDestinatario},
                                {"assunto", "Assunto", objMensagem.DescricaoEmailAssunto, objMensagem.DescricaoEmailAssunto},
                                {"mensagem", "Mensagem", objMensagem.DescricaoMensagem, objMensagem.DescricaoMensagem}
                            };

                try
                {
                    ProcessoAssincrono.IniciarAtividade(
                    TipoAtividade.EnvioEmail,
                    PluginsCompatibilidade.CarregarPorMetadata("EnvioEmail", "PluginSaidaEmailSMS"),
                    parametros,
                    null,
                    null,
                    objMensagem.ArquivoAnexo,
                    objMensagem.NomeAnexo,
                    DateTime.Now);
                }
                catch (Exception ex)
                {
                    EL.GerenciadorException.GravarExcecao(ex);
                }

                #endregion Envio para o Assincrono
            }
            
            

        }
    }
}
