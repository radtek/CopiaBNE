// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    /// <summary>
    /// Informações mínimas para um currículo
    /// </summary>
    public partial class CadastroMiniCurriculo
    {
        /// <summary>
        /// Initializes a new instance of the CadastroMiniCurriculo class.
        /// </summary>
        public CadastroMiniCurriculo() { }

        /// <summary>
        /// Initializes a new instance of the CadastroMiniCurriculo class.
        /// </summary>
        /// <param name="cpf">CPF do candidato</param>
        /// <param name="dataNascimento">Data dde nascimento do
        /// candidato</param>
        /// <param name="dDDCelular">DDD do celular do candidato</param>
        /// <param name="numeroCelular">Número do celular do candidato</param>
        /// <param name="nome">Nome do candidato</param>
        /// <param name="sexo">Sexo do candidato. Possible values include:
        /// 'Masculino', 'Feminino'</param>
        /// <param name="cidade">Nome da cidade no formato
        /// "NomeCidade/SiglaEstado" (Ex.: São Paulo/SP)</param>
        /// <param name="escolaridade">Um dos valores presentes na tabela
        /// Escolaridades.
        /// Caso o valor não esteja presente nesta tabela, será
        /// desconsiderado.</param>
        /// <param name="pretensaoSalarial">Pretensão salarial do
        /// candidato</param>
        /// <param name="email">Email do candidato</param>
        /// <param name="aceitoEstagio">Flag indicando se o candidato aceita
        /// trabalhar como estagiário
        /// Considerados somente para as escolaridades "Ensino Médio
        /// Incompleto",
        /// "Técnico/Pós Médio Incompleto", "Tecnólogo Incompleto" e "Superior
        /// Incompleto"</param>
        /// <param name="funcoesPretendidas">Funções pretendidas pelo
        /// candidato</param>
        public CadastroMiniCurriculo(double cpf, System.DateTime dataNascimento, int dDDCelular, double numeroCelular, string nome, string sexo, string cidade, string escolaridade, double pretensaoSalarial, string email = default(string), bool? aceitoEstagio = default(bool?), System.Collections.Generic.IList<FuncaoPretendida> funcoesPretendidas = default(System.Collections.Generic.IList<FuncaoPretendida>))
        {
            Email = email;
            Cpf = cpf;
            DataNascimento = dataNascimento;
            DDDCelular = dDDCelular;
            NumeroCelular = numeroCelular;
            Nome = nome;
            Sexo = sexo;
            Cidade = cidade;
            Escolaridade = escolaridade;
            AceitoEstagio = aceitoEstagio;
            FuncoesPretendidas = funcoesPretendidas;
            PretensaoSalarial = pretensaoSalarial;
        }

        /// <summary>
        /// Gets or sets email do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets CPF do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cpf")]
        public double Cpf { get; set; }

        /// <summary>
        /// Gets or sets data dde nascimento do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataNascimento")]
        public System.DateTime DataNascimento { get; set; }

        /// <summary>
        /// Gets or sets DDD do celular do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DDDCelular")]
        public int DDDCelular { get; set; }

        /// <summary>
        /// Gets or sets número do celular do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NumeroCelular")]
        public double NumeroCelular { get; set; }

        /// <summary>
        /// Gets or sets nome do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or sets sexo do candidato. Possible values include:
        /// 'Masculino', 'Feminino'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Sexo")]
        public string Sexo { get; set; }

        /// <summary>
        /// Gets or sets nome da cidade no formato "NomeCidade/SiglaEstado"
        /// (Ex.: São Paulo/SP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Gets or sets um dos valores presentes na tabela Escolaridades.
        /// Caso o valor não esteja presente nesta tabela, será desconsiderado.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Escolaridade")]
        public string Escolaridade { get; set; }

        /// <summary>
        /// Gets or sets flag indicando se o candidato aceita trabalhar como
        /// estagiário
        /// Considerados somente para as escolaridades "Ensino Médio
        /// Incompleto",
        /// "Técnico/Pós Médio Incompleto", "Tecnólogo Incompleto" e "Superior
        /// Incompleto"
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AceitoEstagio")]
        public bool? AceitoEstagio { get; set; }

        /// <summary>
        /// Gets or sets funções pretendidas pelo candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FuncoesPretendidas")]
        public System.Collections.Generic.IList<FuncaoPretendida> FuncoesPretendidas { get; set; }

        /// <summary>
        /// Gets or sets pretensão salarial do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PretensaoSalarial")]
        public double PretensaoSalarial { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Nome == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Nome");
            }
            if (Sexo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sexo");
            }
            if (Cidade == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Cidade");
            }
            if (Escolaridade == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Escolaridade");
            }
            if (this.FuncoesPretendidas != null)
            {
                foreach (var element in this.FuncoesPretendidas)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
