// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    /// <summary>
    /// Representa uma vaga de emprego no BNE.
    /// </summary>
    public partial class Vaga
    {
        /// <summary>
        /// Initializes a new instance of the Vaga class.
        /// </summary>
        public Vaga() { }

        /// <summary>
        /// Initializes a new instance of the Vaga class.
        /// </summary>
        /// <param name="funcao">(Obrigatório) Nome completo da função.</param>
        /// <param name="cidade">(Obrigatório) Nome completo da cidade seguido
        /// de barra mais a sigla do estado. Ex.:”Montes Claros/MG”.</param>
        /// <param name="id">Identificador da vaga. Considerado somente nas
        /// pesquisas.
        /// Será desconsiderado em inserções e atualizações.</param>
        /// <param name="tipoVinculo">(Obrigatório) Lista que deve ser
        /// composta pelos seguintes valores.
        /// -&gt; Aprendiz
        /// -&gt; Autônomo
        /// -&gt; Efetivo
        /// -&gt; Estágio
        /// -&gt; Freelancer
        /// -&gt; Temporário</param>
        /// <param name="cursos">Cursos que o estagiário deve estar cursando
        /// para a vaga de estágio.
        /// É considerado somente para os tipos de vínculo "Estágio" e
        /// "Aprendiz". Para os demais vínculos, será desconsiderado.
        /// Na tabela de Cursos é possível ter as sugestões para os cursos
        /// informados mas, embora altamente recomendável por questões de
        /// filtros, não é obrigatório que um valor presente naquela tabela
        /// seja utilizado.</param>
        /// <param name="quantidade">(Obrigatório) Número de vagas
        /// ofertadas.</param>
        /// <param name="escolaridade">Algum dos itens listados:
        /// -&gt; Ensino Fundamental Incompleto
        /// -&gt; Ensino Fundamental Completo
        /// -&gt; Ensino Médio Incompleto
        /// -&gt; Ensino Médio Completo
        /// -&gt; Técnico/Pós-Médio Incompleto
        /// -&gt; Técnico/Pós-Médio Completo
        /// -&gt; Tecnólogo Incompleto
        /// -&gt; Superior Incompleto
        /// -&gt; Tecnólogo Completo
        /// -&gt; Superior Completo
        /// -&gt; Pós Graduação / Especialização
        /// -&gt; Mestrado
        /// -&gt; Doutorado</param>
        /// <param name="salarioMin">(Opcional) Início da faixa salarial
        /// ofertada.</param>
        /// <param name="salarioMax">(Opcional) Final da faixa salarial
        /// ofertada.</param>
        /// <param name="beneficios">(Opcional) Descrição dos benefícios
        /// oferecidos.</param>
        /// <param name="requisitos">(Opcional) Requisitos desejados para a
        /// vaga.</param>
        /// <param name="atribuicoes">(Opcional) Atribuições desejadas para a
        /// vaga.</param>
        /// <param name="disponibilidade">(Opcional) Utilize os itens listados
        /// para compor a lista:
        /// -&gt; Manhã
        /// -&gt; Tarde
        /// -&gt; Noite
        /// -&gt; Sábado
        /// -&gt; Domingo
        /// -&gt; Viagem</param>
        /// <param name="nomeFantasia">Nome fantasia da empresa.</param>
        /// <param name="confidencial">(Obrigatório) Indica se as informações
        /// da empresa são confidênciais.</param>
        /// <param name="perguntas">(Opcional) Lista de objetos do tipo
        /// Pergunta.</param>
        /// <param name="deficiencia">(Opcional) Se a vaga é para PCD é
        /// necessário alguns dos itens:
        /// -&gt; Auditiva
        /// -&gt; Física
        /// -&gt; Mental
        /// -&gt; Múltipla
        /// -&gt; Nenhuma
        /// -&gt; Qualquer
        /// -&gt; Reabilitado
        /// -&gt; Visual</param>
        /// <param name="status">Status atual da vaga. Possible values
        /// include: 'EmPublicacao', 'Ativa', 'Arquivada', 'Inativa'</param>
        /// <param name="dataCadastro">Data de abertura da vaga</param>
        /// <param name="dataAnuncio">Data que a vaga começou a aparecer nas
        /// pesquisas.</param>
        /// <param name="codigoVaga">Codigo da vaga.</param>
        /// <param name="idFilial">Empresa que anunciou a vaga</param>
        /// <param name="bairro">/Bairro da vaga</param>
        /// <param name="area">Area da vaga.</param>
        /// <param name="url">Url da vaga (BNE)</param>
        public Vaga(string funcao, string cidade, int? id = default(int?), System.Collections.Generic.IList<string> tipoVinculo = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> cursos = default(System.Collections.Generic.IList<string>), int? quantidade = default(int?), string escolaridade = default(string), double? salarioMin = default(double?), double? salarioMax = default(double?), string beneficios = default(string), string requisitos = default(string), string atribuicoes = default(string), System.Collections.Generic.IList<string> disponibilidade = default(System.Collections.Generic.IList<string>), string nomeFantasia = default(string), bool? confidencial = default(bool?), System.Collections.Generic.IList<Pergunta> perguntas = default(System.Collections.Generic.IList<Pergunta>), string deficiencia = default(string), string status = default(string), System.DateTime? dataCadastro = default(System.DateTime?), string siglaEstado = default(string), System.DateTime? dataAnuncio = default(System.DateTime?), string desOrigem = default(string), int? tipoOrigem = default(int?), bool? bNERecomenda = default(bool?), string codigoVaga = default(string), int? idFilial = default(int?), string bairro = default(string), string area = default(string), string url = default(string), bool? plano = default(bool?), bool? ofereceCursos = default(bool?), bool? campanha = default(bool?))
        {
            Id = id;
            TipoVinculo = tipoVinculo;
            Cursos = cursos;
            Funcao = funcao;
            Cidade = cidade;
            Quantidade = quantidade;
            Escolaridade = escolaridade;
            SalarioMin = salarioMin;
            SalarioMax = salarioMax;
            Beneficios = beneficios;
            Requisitos = requisitos;
            Atribuicoes = atribuicoes;
            Disponibilidade = disponibilidade;
            NomeFantasia = nomeFantasia;
            Confidencial = confidencial;
            Perguntas = perguntas;
            Deficiencia = deficiencia;
            Status = status;
            DataCadastro = dataCadastro;
            SiglaEstado = siglaEstado;
            DataAnuncio = dataAnuncio;
            DesOrigem = desOrigem;
            TipoOrigem = tipoOrigem;
            BNERecomenda = bNERecomenda;
            CodigoVaga = codigoVaga;
            IdFilial = idFilial;
            Bairro = bairro;
            Area = area;
            Url = url;
            Plano = plano;
            OfereceCursos = ofereceCursos;
            Campanha = campanha;
        }

        /// <summary>
        /// Gets or sets identificador da vaga. Considerado somente nas
        /// pesquisas.
        /// Será desconsiderado em inserções e atualizações.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets (Obrigatório) Lista que deve ser composta pelos
        /// seguintes valores.
        /// -&amp;gt; Aprendiz
        /// -&amp;gt; Autônomo
        /// -&amp;gt; Efetivo
        /// -&amp;gt; Estágio
        /// -&amp;gt; Freelancer
        /// -&amp;gt; Temporário
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TipoVinculo")]
        public System.Collections.Generic.IList<string> TipoVinculo { get; set; }

        /// <summary>
        /// Gets or sets cursos que o estagiário deve estar cursando para a
        /// vaga de estágio.
        /// É considerado somente para os tipos de vínculo "Estágio" e
        /// "Aprendiz". Para os demais vínculos, será desconsiderado.
        /// Na tabela de Cursos é possível ter as sugestões para os cursos
        /// informados mas, embora altamente recomendável por questões de
        /// filtros, não é obrigatório que um valor presente naquela tabela
        /// seja utilizado.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cursos")]
        public System.Collections.Generic.IList<string> Cursos { get; set; }

        /// <summary>
        /// Gets or sets (Obrigatório) Nome completo da função.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Funcao")]
        public string Funcao { get; set; }

        /// <summary>
        /// Gets or sets (Obrigatório) Nome completo da cidade seguido de
        /// barra mais a sigla do estado. Ex.:”Montes Claros/MG”.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Gets or sets (Obrigatório) Número de vagas ofertadas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Quantidade")]
        public int? Quantidade { get; set; }

        /// <summary>
        /// Gets or sets algum dos itens listados:
        /// -&amp;gt; Ensino Fundamental Incompleto
        /// -&amp;gt; Ensino Fundamental Completo
        /// -&amp;gt; Ensino Médio Incompleto
        /// -&amp;gt; Ensino Médio Completo
        /// -&amp;gt; Técnico/Pós-Médio Incompleto
        /// -&amp;gt; Técnico/Pós-Médio Completo
        /// -&amp;gt; Tecnólogo Incompleto
        /// -&amp;gt; Superior Incompleto
        /// -&amp;gt; Tecnólogo Completo
        /// -&amp;gt; Superior Completo
        /// -&amp;gt; Pós Graduação / Especialização
        /// -&amp;gt; Mestrado
        /// -&amp;gt; Doutorado
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Escolaridade")]
        public string Escolaridade { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Início da faixa salarial ofertada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMin")]
        public double? SalarioMin { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Final da faixa salarial ofertada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMax")]
        public double? SalarioMax { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Descrição dos benefícios oferecidos.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Beneficios")]
        public string Beneficios { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Requisitos desejados para a vaga.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Requisitos")]
        public string Requisitos { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Atribuições desejadas para a vaga.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Atribuicoes")]
        public string Atribuicoes { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Utilize os itens listados para compor a
        /// lista:
        /// -&amp;gt; Manhã
        /// -&amp;gt; Tarde
        /// -&amp;gt; Noite
        /// -&amp;gt; Sábado
        /// -&amp;gt; Domingo
        /// -&amp;gt; Viagem
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Disponibilidade")]
        public System.Collections.Generic.IList<string> Disponibilidade { get; set; }

        /// <summary>
        /// Gets or sets nome fantasia da empresa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NomeFantasia")]
        public string NomeFantasia { get; set; }

        /// <summary>
        /// Gets or sets (Obrigatório) Indica se as informações da empresa são
        /// confidênciais.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Confidencial")]
        public bool? Confidencial { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Lista de objetos do tipo Pergunta.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Perguntas")]
        public System.Collections.Generic.IList<Pergunta> Perguntas { get; set; }

        /// <summary>
        /// Gets or sets (Opcional) Se a vaga é para PCD é necessário alguns
        /// dos itens:
        /// -&amp;gt; Auditiva
        /// -&amp;gt; Física
        /// -&amp;gt; Mental
        /// -&amp;gt; Múltipla
        /// -&amp;gt; Nenhuma
        /// -&amp;gt; Qualquer
        /// -&amp;gt; Reabilitado
        /// -&amp;gt; Visual
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Deficiencia")]
        public string Deficiencia { get; set; }

        /// <summary>
        /// Gets or sets status atual da vaga. Possible values include:
        /// 'EmPublicacao', 'Ativa', 'Arquivada', 'Inativa'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets data de abertura da vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataCadastro")]
        public System.DateTime? DataCadastro { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SiglaEstado")]
        public string SiglaEstado { get; set; }

        /// <summary>
        /// Gets or sets data que a vaga começou a aparecer nas pesquisas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataAnuncio")]
        public System.DateTime? DataAnuncio { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DesOrigem")]
        public string DesOrigem { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TipoOrigem")]
        public int? TipoOrigem { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "BNERecomenda")]
        public bool? BNERecomenda { get; set; }

        /// <summary>
        /// Gets or sets codigo da vaga.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CodigoVaga")]
        public string CodigoVaga { get; set; }

        /// <summary>
        /// Gets or sets empresa que anunciou a vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdFilial")]
        public int? IdFilial { get; set; }

        /// <summary>
        /// Gets or sets /Bairro da vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// Gets or sets area da vaga.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Area")]
        public string Area { get; set; }

        /// <summary>
        /// Gets or sets url da vaga (BNE)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Plano")]
        public bool? Plano { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Oferece_Cursos")]
        public bool? OfereceCursos { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Campanha")]
        public bool? Campanha { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Funcao == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Funcao");
            }
            if (Cidade == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Cidade");
            }
            if (this.Funcao != null)
            {
                if (this.Funcao.Length > 200)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Funcao", 200);
                }
                if (this.Funcao.Length < 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Funcao", 4);
                }
            }
            if (this.Cidade != null)
            {
                if (this.Cidade.Length > 200)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Cidade", 200);
                }
                if (this.Cidade.Length < 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Cidade", 5);
                }
            }
        }
    }
}
