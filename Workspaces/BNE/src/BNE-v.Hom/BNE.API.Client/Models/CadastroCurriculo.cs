// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    /// <summary>
    /// Classe com as informações para o cadastro de currículo
    /// </summary>
    public partial class CadastroCurriculo
    {
        /// <summary>
        /// Initializes a new instance of the CadastroCurriculo class.
        /// </summary>
        public CadastroCurriculo() { }

        /// <summary>
        /// Initializes a new instance of the CadastroCurriculo class.
        /// </summary>
        /// <param name="miniCurriculo">Propriedade com as informações básicas
        /// do currículo</param>
        /// <param name="dadosPessoais">Propriedade com as informações de
        /// dados pessoais do currículo</param>
        /// <param name="formacao">Propriedade com as formações do
        /// currículo</param>
        /// <param name="experiencias">Lista com as experiências profissionais
        /// do candidato.
        /// Somente as 10 primeiras esperiências serão salvas.
        /// A order das experiências deve ser indicada em ordem crescente de
        /// importancia (a de maior importância por primeiro).</param>
        /// <param name="dadosComplementares">Dados complementares do
        /// candidato</param>
        public CadastroCurriculo(CadastroMiniCurriculo miniCurriculo = default(CadastroMiniCurriculo), DadosPessoais dadosPessoais = default(DadosPessoais), FormacaoCurriculo formacao = default(FormacaoCurriculo), System.Collections.Generic.IList<CadastroExperienciaProfissional> experiencias = default(System.Collections.Generic.IList<CadastroExperienciaProfissional>), DadosComplementares dadosComplementares = default(DadosComplementares))
        {
            MiniCurriculo = miniCurriculo;
            DadosPessoais = dadosPessoais;
            Formacao = formacao;
            Experiencias = experiencias;
            DadosComplementares = dadosComplementares;
        }

        /// <summary>
        /// Gets or sets propriedade com as informações básicas do currículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "MiniCurriculo")]
        public CadastroMiniCurriculo MiniCurriculo { get; set; }

        /// <summary>
        /// Gets or sets propriedade com as informações de dados pessoais do
        /// currículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DadosPessoais")]
        public DadosPessoais DadosPessoais { get; set; }

        /// <summary>
        /// Gets or sets propriedade com as formações do currículo
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Formacao")]
        public FormacaoCurriculo Formacao { get; set; }

        /// <summary>
        /// Gets or sets lista com as experiências profissionais do candidato.
        /// 
        /// Somente as 10 primeiras esperiências serão salvas.
        /// A order das experiências deve ser indicada em ordem crescente de
        /// importancia (a de maior importância por primeiro).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Experiencias")]
        public System.Collections.Generic.IList<CadastroExperienciaProfissional> Experiencias { get; set; }

        /// <summary>
        /// Gets or sets dados complementares do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DadosComplementares")]
        public DadosComplementares DadosComplementares { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MiniCurriculo != null)
            {
                this.MiniCurriculo.Validate();
            }
            if (this.DadosPessoais != null)
            {
                this.DadosPessoais.Validate();
            }
            if (this.Experiencias != null)
            {
                foreach (var element in this.Experiencias)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
