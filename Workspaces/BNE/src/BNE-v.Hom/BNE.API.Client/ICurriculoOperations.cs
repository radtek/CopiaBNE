// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using Models;

    /// <summary>
    /// CurriculoOperations operations.
    /// </summary>
    public partial interface ICurriculoOperations
    {
        /// <summary>
        /// Obtem os dados do cadastro do currículo.
        /// </summary>
        /// <remarks>
        /// Endpoint utilizado para a obtenção dos dados de cadastro do
        /// candidato.
        /// O currículo retornado será o pertencente ao CPF
        /// informado na apikey ou do CPF informado na query string.
        /// Esse endpoint deve ser utilizado para a exibição dos
        /// dados exclusivamente aos candidatos ou para sistemas internos do
        /// BNE.
        /// Para a exibição de currículos às empresas, o endpoint
        /// /v1.0/Curriculo/ObterCV deve ser utilizado.
        /// </remarks>
        /// <param name='cpf'>
        /// CPF do currículo a ser carregado. Somente usuários administradores
        /// podem informar esse parâmetro.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<CadastroCurriculo>> GetCadastroCVBycpfWithHttpMessagesAsync(double? cpf = default(double?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Atualiza um currículo
        /// </summary>
        /// <remarks>
        /// Endpoint utilizado somente para a atualiza de currículos.
        /// O currículo alterado será o pertencente ao CPF
        /// informado na apikey.
        /// As propriedades são opcionais e não serão atualizadas
        /// caso não sejam informadas.
        /// Para apagar o valor da propriedade, indique um valor
        /// vazio na atualização.
        /// </remarks>
        /// <param name='curriculo'>
        /// Dados do currículo para atualização
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCadastroCVDTO>> PutCadastroCVBycurriculoWithHttpMessagesAsync(CadastroCurriculo curriculo, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cadastra um novo currículo
        /// </summary>
        /// <remarks>
        /// Endpoint utilizado somente para a inserção de novos currículos.
        /// Se um currículo já existe for informado, a chamada
        /// será respondida com um erro.
        /// </remarks>
        /// <param name='curriculo'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCadastroCVDTO>> PostCadastroCVBycurriculoWithHttpMessagesAsync(CadastroCurriculo curriculo, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Atualiza a foto do currículo
        /// </summary>
        /// <remarks>
        /// A foto será definida para o pertencente ao CPF informado na
        /// apikey.
        /// O tamanho mínimo para uma imagem é de 100px X 100px.
        /// Para apagar a foto presente no currículo, efetue um
        /// POST sem nenhum dado.
        /// </remarks>
        /// <param name='file'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCadastroCVDTO>> PostFotoByfileWithHttpMessagesAsync(System.IO.Stream file = default(System.IO.Stream), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retorna o curriculo selecionado pelo usuario a partir do CPF e
        /// Data de Nascimento.
        /// </summary>
        /// <param name='cpf'>
        /// Cpf do curriculo desejado
        /// </param>
        /// <param name='nascimento'>
        /// Data de nascimento do currículo desejado
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPesquisaCurriculoCompleto>> ObterCVPorCpfBycpfnascimentoWithHttpMessagesAsync(double cpf, System.DateTime nascimento, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retorna o curriculo selecionado pelo usuario a partir do
        /// IdCurriculo.
        /// </summary>
        /// <param name='idCurriculo'>
        /// Id do currículo a ser retornado.
        /// </param>
        /// <param name='flgDadosdeContato'>
        /// Indica se deseja que os dados de contato devem ser retornados. Se
        /// true, a consulta será contabilizada como visualização do
        /// currículo e será descontada do plano do cliente.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPesquisaCurriculoCompleto>> ObterCVByIdCurriculoFlgDadosdeContatoWithHttpMessagesAsync(int idCurriculo, bool flgDadosdeContato, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retorna o cadastro do curriculo selecionado pelo usuario a partir
        /// do IdCurriculo.
        /// </summary>
        /// <remarks>
        /// Esse endpoint deve ser utilizado para que a selecionadora tenha
        /// acesso às mesmas informações do cadastro do currículo do
        /// candidato.
        /// Para recuperar as informações do currículos para o CPF informado
        /// na apikey, utilize o endpoint CadastroCv com o method GET.
        /// </remarks>
        /// <param name='idCurriculo'>
        /// Id do currículo a ser retornado.
        /// </param>
        /// <param name='flgDadosdeContato'>
        /// Indica se deseja que os dados de contato devem ser retornados. Se
        /// true, a consulta será contabilizada como visualização do
        /// currículo e será descontada do plano do cliente.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<CadastroCurriculo>> ObterCadastroCVByIdCurriculoFlgDadosdeContatoWithHttpMessagesAsync(int idCurriculo, bool flgDadosdeContato, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <param name='cpf'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> DownloadArquivoBycpfWithHttpMessagesAsync(double cpf, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retorna uma lista de currículos baseada nos parâmetros informados.
        /// </summary>
        /// <param name='filtros'>
        /// Objeto com os filtros a serem aplicados na pesquisa de curriculos
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPesquisaCurriculo>> PesquisaAvancadaByfiltrosWithHttpMessagesAsync(PesquisaCurriculo filtros, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Valida o MimeType de uma imagem, ou se consegue abrir o arquivo
        /// corretamente usando o objeto Image
        /// </summary>
        /// <param name='ba'>
        /// A imagem
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<bool?>> ValidateImageBybaWithHttpMessagesAsync(byte[] ba, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
