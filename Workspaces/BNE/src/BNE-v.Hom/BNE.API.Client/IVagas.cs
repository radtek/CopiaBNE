// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using Models;

    /// <summary>
    /// Vagas operations.
    /// </summary>
    public partial interface IVagas
    {
        /// <summary>
        /// Recupera a lista de vagas cadastradas para a api key informada
        /// </summary>
        /// <remarks>
        /// Endpoint utilizado para acesso às vagas da empresa. As vagas
        /// retornadas serão filtradas baseadas nas informações presentes na
        /// APIKey passada.
        /// </remarks>
        /// <param name='pagina'>
        /// Página que deve ser retornada. A primeira página é "1".
        /// </param>
        /// <param name='registrosPorPagina'>
        /// Número de registros a ser retornado por página. Default: 10
        /// </param>
        /// <param name='somenteMinhasVagas'>
        /// Se true, retorna somente as vagas que foram anunciadas pelo CPF
        /// presente na ApiKey. Se false, retorna as vagas cadastradas para a
        /// empresa informada no APIKey.
        /// </param>
        /// <param name='tipoVinculo'>
        /// Tipo de vínculo utilizado para filtrar as vagas. Possible values
        /// include: 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio',
        /// 'Freelancer', 'Temporario'
        /// </param>
        /// <param name='statusVaga'>
        /// Status da vaga. Possible values include: 'EmPublicacao', 'Ativa',
        /// 'Arquivada', 'Inativa'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPaginadoVagaEmpresa>> GetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaWithHttpMessagesAsync(int? pagina = default(int?), int? registrosPorPagina = default(int?), bool? somenteMinhasVagas = default(bool?), string tipoVinculo = default(string), string statusVaga = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pesquisa de vagas
        /// </summary>
        /// <remarks>
        /// Endpoint para pesquisa de vagas.
        /// </remarks>
        /// <param name='pagina'>
        /// Página a ser retornada. Iniciando em 1.
        /// </param>
        /// <param name='registrosPorPagina'>
        /// Número de registros por página
        /// </param>
        /// <param name='query'>
        /// Pesquisa textual
        /// </param>
        /// <param name='salarioMinimo'>
        /// Salário mínimo oferecido pela vaga
        /// </param>
        /// <param name='salarioMaximo'>
        /// Salário máximo oferecido pela vaga
        /// </param>
        /// <param name='tipoVinculo'>
        /// Tipo de vínculo desejado
        /// </param>
        /// <param name='funcao'>
        /// Funcão da vaga
        /// </param>
        /// <param name='area'>
        /// Área de atuação
        /// </param>
        /// <param name='escolaridade'>
        /// Escolaridade
        /// </param>
        /// <param name='deficiencia'>
        /// Deficiência para vagas BNE
        /// </param>
        /// <param name='disponibilidade'>
        /// Disponibilidade requerida para a vaga
        /// </param>
        /// <param name='siglaEstado'>
        /// Nomes das cidades desejadas
        /// </param>
        /// <param name='nomeCidade'>
        /// Nomes das cidades desejadas
        /// </param>
        /// <param name='empresa'>
        /// Nomes das empresas anunciantes
        /// </param>
        /// <param name='dataInicio'>
        /// Limite inferior para a abertura da vaga
        /// </param>
        /// <param name='dataFim'>
        /// Limite superior para a abertura da vaga
        /// </param>
        /// <param name='idOrigem'>
        /// Origem das vagas, empresas que possuem STC
        /// </param>
        /// <param name='oportunidade'>
        /// Trazer oportunidade (vagas abertas a mais de 60 dias)
        /// </param>
        /// <param name='ordenacao'>
        /// Ordenação ex: "Dta_Abertura asc, Des_Funcao desc"
        /// </param>
        /// <param name='curso'>
        /// Cursos pesquisados com like
        /// </param>
        /// <param name='idCurso'>
        /// Pesquisa acertiva dos curso
        /// </param>
        /// <param name='curriculo'>
        /// Curriculo do BNE - para não trazer as vagas da empresa que o
        /// candidato bloqueou.
        /// </param>
        /// <param name='ofereceCurso'>
        /// Vagas de empresa que oferecem curso
        /// </param>
        /// <param name='funcaoAgrupadora'>
        /// Vai retoranar as vagas com funções similares a pesquisada.
        /// </param>
        /// <param name='cidadeRegiao'>
        /// Alem das vaga da cidade ira trazer as vagas da região
        /// metropolitana.
        /// </param>
        /// <param name='idfFilial'>
        /// Buscar vagas da filial
        /// </param>
        /// <param name='confidencial'>
        /// Mostrar vagas Confidenciais (vaga de Empresas que optaram a não
        /// aparecer como anunciante na vaga)
        /// </param>
        /// <param name='campanha'>
        /// Vaga de campanha
        /// </param>
        /// <param name='usuarioFilial'>
        /// Quem Anunciou a vaga.
        /// </param>
        /// <param name='facetField'>
        /// Campos para os quais a totalização deve ser retornada
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPesquisaVaga>> GetBypaginaregistrosPorPaginaquerysalarioMinimosalarioMaximotipoVinculofuncaoareaescolaridadedeficienciadisponibilidadesiglaEstadonomeCidadeempresadataIniciodataFimidOrigemoportunidadeordenacaocursoidCursocurriculoofereceCursofuncaoAgrupadoracidadeRegiaoidfFilialconfidencialcampanhausuarioFilialfacetFieldWithHttpMessagesAsync(int? pagina = default(int?), int? registrosPorPagina = default(int?), string query = default(string), double? salarioMinimo = default(double?), double? salarioMaximo = default(double?), System.Collections.Generic.IList<string> tipoVinculo = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> funcao = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> area = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> escolaridade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> deficiencia = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> disponibilidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> siglaEstado = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nomeCidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> empresa = default(System.Collections.Generic.IList<string>), System.DateTime? dataInicio = default(System.DateTime?), System.DateTime? dataFim = default(System.DateTime?), System.Collections.Generic.IList<int?> idOrigem = default(System.Collections.Generic.IList<int?>), bool? oportunidade = default(bool?), string ordenacao = default(string), System.Collections.Generic.IList<string> curso = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<int?> idCurso = default(System.Collections.Generic.IList<int?>), int? curriculo = default(int?), bool? ofereceCurso = default(bool?), int? funcaoAgrupadora = default(int?), int? cidadeRegiao = default(int?), int? idfFilial = default(int?), bool? confidencial = default(bool?), bool? campanha = default(bool?), System.Collections.Generic.IList<int?> usuarioFilial = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<string> facetField = default(System.Collections.Generic.IList<string>), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recupera uma vaga baseada em seu ID
        /// </summary>
        /// <param name='id'>
        /// Id da Vaga a ser recuperada
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<VagaEmpresa>> GetByidWithHttpMessagesAsync(int id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recupera uma vaga baseada em seu ID
        /// </summary>
        /// <param name='id'>
        /// Id da Vaga a ser recuperada
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<VagaEmpresa>> GetEmpresaByidWithHttpMessagesAsync(int id, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recupera os dados da empresa que anunciou a vaga
        /// </summary>
        /// <param name='idVaga'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<DadosEmpresa>> DadosDaEmpresaByidVagaWithHttpMessagesAsync(int idVaga, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Recupera uma vaga baseada em seu ID
        /// </summary>
        /// <param name='id'>
        /// Id da Vaga a ser recuperada
        /// </param>
        /// <param name='novoStatusVaga'>
        /// Status a ser assumido pela vaga.
        /// O status "Inativa", irá exibir a vaga como
        /// oportunidade para o candidato, informando que a vaga está
        /// fechada, mas a empresa aceita receber currículos com o perfil da
        /// vaga.
        /// Para o status "Arquivada", A vaga deixará de ser
        /// exibida para os candidatos. Possible values include:
        /// 'EmPublicacao', 'Ativa', 'Arquivada', 'Inativa'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<VagaEmpresa>> AtualizarStatusByidnovoStatusVagaWithHttpMessagesAsync(int id, string novoStatusVaga, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Realiza a candidatura a uma vaga.
        /// </summary>
        /// <remarks>
        /// A candidatura será efetuada para o usuário informado na ApiKey
        /// </remarks>
        /// <param name='idVaga'>
        /// Identificador da vaga
        /// </param>
        /// <param name='candidatura'>
        /// Informações adicionais para a candidatura
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> CandidatarByidVagacandidaturaWithHttpMessagesAsync(int idVaga, Candidatura candidatura, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Consulta a vagas candidatadas.
        /// </summary>
        /// <remarks>
        /// As vagas serão retornadas para o usuário informado na ApiKey
        /// </remarks>
        /// <param name='tipoVinculo'>
        /// Tipo do vínculo das vagas candidatadas. Possible values include:
        /// 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio', 'Freelancer',
        /// 'Temporario'
        /// </param>
        /// <param name='pagina'>
        /// Pagina a ser retornada
        /// </param>
        /// <param name='registrosPorPagina'>
        /// Informações adicionais para a candidatura
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoPaginadoVaga>> CandidatadasBytipoVinculopaginaregistrosPorPaginaWithHttpMessagesAsync(string tipoVinculo = default(string), int? pagina = default(int?), int? registrosPorPagina = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cadastra uma nova vaga.
        /// </summary>
        /// <param name='vaga'>
        /// Vaga que será publicada na filial do usuário.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoVagaDTO>> SalvarByvagaWithHttpMessagesAsync(VagaEmpresa vaga, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Atualiza uma vaga já cadastrada.
        /// </summary>
        /// <param name='idVaga'>
        /// Identificador da vaga a ser atualizada
        /// </param>
        /// <param name='vaga'>
        /// Vaga que será publicada na filial do usuário.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoVagaDTO>> SalvarByidVagavagaWithHttpMessagesAsync(int idVaga, VagaEmpresa vaga, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os minicurrículos dos candidatos de uma determinada vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='pagina'>
        /// Número da página que deseja acessar. O valor padrão é 1
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCandidatosDTOMiniCurriculo>> ObterMiniCurriculosCandidatosBycodigoVagapaginaWithHttpMessagesAsync(int codigoVaga, int? pagina = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os currículos completos dos candidatos de uma determinada
        /// vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='pagina'>
        /// Número da página que deseja acessar. O valor padrão é 1
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCandidatosDTOResultadoPesquisaCurriculoCompleto>> ObterCurriculosCandidatosBycodigoVagapaginaWithHttpMessagesAsync(int codigoVaga, int? pagina = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os candidatos de uma determinada vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='pagina'>
        /// Número da página que deseja acessar. O valor padrão é 1
        /// </param>
        /// <param name='returnType'>
        /// Formato desejado para os currículos candidatos. O valor padrão é
        /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
        /// 'CurriculoCompleto'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<ResultadoCandidatosDTOCurriculo>> ObterCandidatosBycodigoVagapaginareturnTypeWithHttpMessagesAsync(int codigoVaga, int? pagina = default(int?), string returnType = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os minicurriculos candidatos de uma determinada vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='data'>
        /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<MiniCurriculo>>> ObterUltimosMiniCurriculosCandidatosBycodigoVagadataWithHttpMessagesAsync(int codigoVaga, System.DateTime data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os currículos candidatos de uma determinada vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='data'>
        /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<ResultadoPesquisaCurriculoCompleto>>> ObterUltimosCurriculosCandidatosBycodigoVagadataWithHttpMessagesAsync(int codigoVaga, System.DateTime data, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Lista os candidatos de uma determinada vaga.
        /// </summary>
        /// <param name='codigoVaga'>
        /// Código da vaga.
        /// </param>
        /// <param name='data'>
        /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
        /// </param>
        /// <param name='returnType'>
        /// Formato desejado para os currículos candidatos. O valor padrão é
        /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
        /// 'CurriculoCompleto'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Curriculo>>> ObterUltimosCandidatosBycodigoVagadatareturnTypeWithHttpMessagesAsync(int codigoVaga, System.DateTime data, string returnType = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
