//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BNE.BLL.CloudTag.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CLOUDTAG : DbContext
    {
        public CLOUDTAG()
            : base("name=CLOUDTAG")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<TAB_Dicionario_Nao_Utilizado> TAB_Dicionario_Nao_Utilizado { get; set; }
        public DbSet<TAB_Funcao> TAB_Funcao { get; set; }
        public DbSet<TAB_Funcao_sinonimo> TAB_Funcao_sinonimo { get; set; }
        public DbSet<TAB_Palavra_Funcao> TAB_Palavra_Funcao { get; set; }
        public DbSet<TAB_Palavra_Funcao_Vaga> TAB_Palavra_Funcao_Vaga { get; set; }
        public DbSet<TAB_Preposicao> TAB_Preposicao { get; set; }
    
        [EdmFunction("CLOUDTAG", "fnSplit")]
        public virtual IQueryable<fnSplit_Result> fnSplit(string sInputList, string sDelimiter)
        {
            var sInputListParameter = sInputList != null ?
                new ObjectParameter("sInputList", sInputList) :
                new ObjectParameter("sInputList", typeof(string));
    
            var sDelimiterParameter = sDelimiter != null ?
                new ObjectParameter("sDelimiter", sDelimiter) :
                new ObjectParameter("sDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplit_Result>("[CLOUDTAG].[fnSplit](@sInputList, @sDelimiter)", sInputListParameter, sDelimiterParameter);
        }
    
        [EdmFunction("CLOUDTAG", "Split")]
        public virtual IQueryable<Split_Result> Split(string input, string delimiter)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[CLOUDTAG].[Split](@Input, @Delimiter)", inputParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<TAB_SP_Busca_Funcao_Result> TAB_SP_Busca_Funcao(Nullable<int> idf_funcao, Nullable<int> num_Minimo_Repeticao)
        {
            var idf_funcaoParameter = idf_funcao.HasValue ?
                new ObjectParameter("idf_funcao", idf_funcao) :
                new ObjectParameter("idf_funcao", typeof(int));
    
            var num_Minimo_RepeticaoParameter = num_Minimo_Repeticao.HasValue ?
                new ObjectParameter("Num_Minimo_Repeticao", num_Minimo_Repeticao) :
                new ObjectParameter("Num_Minimo_Repeticao", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TAB_SP_Busca_Funcao_Result>("TAB_SP_Busca_Funcao", idf_funcaoParameter, num_Minimo_RepeticaoParameter);
        }
    
        public virtual int TAB_SP_Busca_Palavra(string palavra, Nullable<int> cont)
        {
            var palavraParameter = palavra != null ?
                new ObjectParameter("palavra", palavra) :
                new ObjectParameter("palavra", typeof(string));
    
            var contParameter = cont.HasValue ?
                new ObjectParameter("cont", cont) :
                new ObjectParameter("cont", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TAB_SP_Busca_Palavra", palavraParameter, contParameter);
        }
    
        public virtual int TAB_SP_Busca_Palavra_cv(string des_palavra)
        {
            var des_palavraParameter = des_palavra != null ?
                new ObjectParameter("des_palavra", des_palavra) :
                new ObjectParameter("des_palavra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TAB_SP_Busca_Palavra_cv", des_palavraParameter);
        }
    
        public virtual int TAG_SP_Palavra_Funcao(string des_Funcao, Nullable<int> cont)
        {
            var des_FuncaoParameter = des_Funcao != null ?
                new ObjectParameter("Des_Funcao", des_Funcao) :
                new ObjectParameter("Des_Funcao", typeof(string));
    
            var contParameter = cont.HasValue ?
                new ObjectParameter("Cont", cont) :
                new ObjectParameter("Cont", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TAG_SP_Palavra_Funcao", des_FuncaoParameter, contParameter);
        }
    }
}
