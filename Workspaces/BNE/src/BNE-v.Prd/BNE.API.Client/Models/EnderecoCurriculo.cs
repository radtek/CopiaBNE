// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    public partial class EnderecoCurriculo
    {
        /// <summary>
        /// Initializes a new instance of the EnderecoCurriculo class.
        /// </summary>
        public EnderecoCurriculo() { }

        /// <summary>
        /// Initializes a new instance of the EnderecoCurriculo class.
        /// </summary>
        /// <param name="cep">Cep do endereço</param>
        /// <param name="logradouro">Nome da rua, avenida, travessa,
        /// etc</param>
        /// <param name="numero">Número do endereço.
        /// Aceita string caso o número não esteja disponível.
        /// Recomenda-se o envio de SN para esses casos</param>
        /// <param name="bairro">Bairro do endereço.</param>
        /// <param name="cidade">Nome da cidade no formato
        /// "NomeCidade/SiglaEstado" (Ex.: São Paulo/SP)</param>
        /// <param name="complemento">Complemento do endereço</param>
        public EnderecoCurriculo(double cep, string logradouro, string numero, string bairro, string cidade, string complemento = default(string))
        {
            Cep = cep;
            Logradouro = logradouro;
            Numero = numero;
            Complemento = complemento;
            Bairro = bairro;
            Cidade = cidade;
        }

        /// <summary>
        /// Gets or sets cep do endereço
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cep")]
        public double Cep { get; set; }

        /// <summary>
        /// Gets or sets nome da rua, avenida, travessa, etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Logradouro")]
        public string Logradouro { get; set; }

        /// <summary>
        /// Gets or sets número do endereço.
        /// Aceita string caso o número não esteja disponível.
        /// Recomenda-se o envio de SN para esses casos
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Numero")]
        public string Numero { get; set; }

        /// <summary>
        /// Gets or sets complemento do endereço
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Complemento")]
        public string Complemento { get; set; }

        /// <summary>
        /// Gets or sets bairro do endereço.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// Gets or sets nome da cidade no formato "NomeCidade/SiglaEstado"
        /// (Ex.: São Paulo/SP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Logradouro == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Logradouro");
            }
            if (Numero == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Numero");
            }
            if (Bairro == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Bairro");
            }
            if (Cidade == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Cidade");
            }
        }
    }
}
