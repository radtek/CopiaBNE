// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    public partial class PesquisaCurriculo
    {
        /// <summary>
        /// Initializes a new instance of the PesquisaCurriculo class.
        /// </summary>
        public PesquisaCurriculo() { }

        /// <summary>
        /// Initializes a new instance of the PesquisaCurriculo class.
        /// </summary>
        /// <param name="registrosPorPagina">Número de registros a ser
        /// retornado por página</param>
        /// <param name="pagina">Número da página, iniciando em 1</param>
        /// <param name="funcao">Um dos valores presentes da Tabela de
        /// Funções</param>
        /// <param name="listaFuncoes">Lista com as funcoes desejadas.
        /// Mesma funcionalidade do campo Funcao, podendo indicar uma série de
        /// valores.
        /// Indicar valores presentes da Tabela de Funções.</param>
        /// <param name="cidade">Um dos valores presentes da Tabela de
        /// Cidades. Enviar no formato nome-da-cidade/UF.</param>
        /// <param name="disponibilidades">Lista de disponibilidades</param>
        /// <param name="palavraChave">Palavra chave a ser pesquisada em todo
        /// o currículo.</param>
        /// <param name="excluirPalavraChave">Currículos com essa(s)
        /// palavra(s) chave(s) serão excluídos do resultado.</param>
        /// <param name="palavraChaveExperiencia">Palavra chave a ser
        /// pesquisada nas experiências.</param>
        /// <param name="funcaoExperiencia">Pesquisa a função nas exoeriências
        /// do usuário. Recomenda-se informar um dos valores presentes da
        /// Tabela de Funções</param>
        /// <param name="estado">Sigla de um dos estados brasileiros</param>
        /// <param name="escolaridade">Um dos valores presentes na Tabela
        /// Escolaridades.</param>
        /// <param name="sexo">Sexo informado no currículo. Possible values
        /// include: 'Masculino', 'Feminino'</param>
        /// <param name="idadeMinima">Idade Mínima informada no
        /// currículo.</param>
        /// <param name="idadeMaxima">Idade Máxima informada no
        /// currículo.</param>
        /// <param name="salarioMinimo">Salário Mínimo informada no currículo
        /// no formato americano.</param>
        /// <param name="salarioMaximo">Salário Máximo informada no currículo
        /// no formato americano.</param>
        /// <param name="quantidadeExperiencia">Quantidade de experiência
        /// mínima em meses.</param>
        /// <param name="idioma">Lista com os valores presentes no Enumerador
        /// Idiomas</param>
        /// <param name="codCPFNome">Indicar o código do currículo (BNE), CPF
        /// ou Nome. Utilizado para buscar um currículo específico.</param>
        /// <param name="estadoCivil">Indicar um dos valores presentes no
        /// Enumerador Estado Civil.</param>
        /// <param name="bairro">Bairro do candidato.</param>
        /// <param name="logradouro">Endereço do candidato.</param>
        /// <param name="cEPMinimo">CEP mínimo do endereço do candidato</param>
        /// <param name="cEPMaximo">CEP máximo do endereço do candidato</param>
        /// <param name="cursoTecnicoGraduacao">Curso técnico ou de graduação
        /// desejado</param>
        /// <param name="instituicaoTecnicoGraduacao">Instituição de ensino do
        /// curso técnico ou de graduação desejada</param>
        /// <param name="cursoOutrosCursos">Cursos adicionais.</param>
        /// <param name="instituicaoOutrosCursos">Instituição do curso
        /// adicional</param>
        /// <param name="empresaQueJaTrabalhou">Empresa presente nas
        /// experiências</param>
        /// <param name="areaEmpresaQueJaTrabalhou">Indicar um dos valores
        /// presentes na tabela Areas</param>
        /// <param name="categoriaHabilitacao">Indicar um dos valores
        /// presentes na tabela CategoriasHabilitacao</param>
        /// <param name="dDDTelefone">DDD do telefone do candidato</param>
        /// <param name="numeroTelefone">Número do telefone do
        /// candidato</param>
        /// <param name="email">E-mail do candidato</param>
        /// <param name="deficiencia">Indicar um dos valores presentes na
        /// tabela Deficiencias</param>
        /// <param name="tipoVeiculo">Indicar um dos valores presentes na
        /// tabela TiposVeiculo</param>
        /// <param name="raca">Indicar um dos valores presentes na tabela
        /// Racas</param>
        /// <param name="possuiFilhos">Indicar true, se desejar filtrar
        /// candidatos com filhos</param>
        /// <param name="queroContratarEstagiarios">Indicar true, se desejar
        /// filtrar candidatos com perfil de estágio.</param>
        /// <param name="formacao">Parametros de pesquisa para
        /// formacoes</param>
        /// <param name="cPF">CPF do usuário que está efetuando a
        /// requisição</param>
        /// <param name="dataNascimento">Data de nascimento do usuário que
        /// está efetuando a requisição</param>
        public PesquisaCurriculo(int? registrosPorPagina = default(int?), int? pagina = default(int?), string funcao = default(string), System.Collections.Generic.IList<string> listaFuncoes = default(System.Collections.Generic.IList<string>), string cidade = default(string), System.Collections.Generic.IList<string> disponibilidades = default(System.Collections.Generic.IList<string>), string palavraChave = default(string), string excluirPalavraChave = default(string), string palavraChaveExperiencia = default(string), string funcaoExperiencia = default(string), string estado = default(string), string escolaridade = default(string), string sexo = default(string), int? idadeMinima = default(int?), int? idadeMaxima = default(int?), double? salarioMinimo = default(double?), double? salarioMaximo = default(double?), long? quantidadeExperiencia = default(long?), System.Collections.Generic.IList<string> idioma = default(System.Collections.Generic.IList<string>), string codCPFNome = default(string), string estadoCivil = default(string), string bairro = default(string), string logradouro = default(string), string cEPMinimo = default(string), string cEPMaximo = default(string), string cursoTecnicoGraduacao = default(string), string instituicaoTecnicoGraduacao = default(string), string cursoOutrosCursos = default(string), string instituicaoOutrosCursos = default(string), string empresaQueJaTrabalhou = default(string), string areaEmpresaQueJaTrabalhou = default(string), string categoriaHabilitacao = default(string), string dDDTelefone = default(string), string numeroTelefone = default(string), string email = default(string), string deficiencia = default(string), string tipoVeiculo = default(string), string raca = default(string), bool? possuiFilhos = default(bool?), bool? queroContratarEstagiarios = default(bool?), PesquisaCurriculoFormacao formacao = default(PesquisaCurriculoFormacao), string cPF = default(string), System.DateTime? dataNascimento = default(System.DateTime?))
        {
            RegistrosPorPagina = registrosPorPagina;
            Pagina = pagina;
            Funcao = funcao;
            ListaFuncoes = listaFuncoes;
            Cidade = cidade;
            Disponibilidades = disponibilidades;
            PalavraChave = palavraChave;
            ExcluirPalavraChave = excluirPalavraChave;
            PalavraChaveExperiencia = palavraChaveExperiencia;
            FuncaoExperiencia = funcaoExperiencia;
            Estado = estado;
            Escolaridade = escolaridade;
            Sexo = sexo;
            IdadeMinima = idadeMinima;
            IdadeMaxima = idadeMaxima;
            SalarioMinimo = salarioMinimo;
            SalarioMaximo = salarioMaximo;
            QuantidadeExperiencia = quantidadeExperiencia;
            Idioma = idioma;
            CodCPFNome = codCPFNome;
            EstadoCivil = estadoCivil;
            Bairro = bairro;
            Logradouro = logradouro;
            CEPMinimo = cEPMinimo;
            CEPMaximo = cEPMaximo;
            CursoTecnicoGraduacao = cursoTecnicoGraduacao;
            InstituicaoTecnicoGraduacao = instituicaoTecnicoGraduacao;
            CursoOutrosCursos = cursoOutrosCursos;
            InstituicaoOutrosCursos = instituicaoOutrosCursos;
            EmpresaQueJaTrabalhou = empresaQueJaTrabalhou;
            AreaEmpresaQueJaTrabalhou = areaEmpresaQueJaTrabalhou;
            CategoriaHabilitacao = categoriaHabilitacao;
            DDDTelefone = dDDTelefone;
            NumeroTelefone = numeroTelefone;
            Email = email;
            Deficiencia = deficiencia;
            TipoVeiculo = tipoVeiculo;
            Raca = raca;
            PossuiFilhos = possuiFilhos;
            QueroContratarEstagiarios = queroContratarEstagiarios;
            Formacao = formacao;
            CPF = cPF;
            DataNascimento = dataNascimento;
        }

        /// <summary>
        /// Gets or sets número de registros a ser retornado por página
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "RegistrosPorPagina")]
        public int? RegistrosPorPagina { get; set; }

        /// <summary>
        /// Gets or sets número da página, iniciando em 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Pagina")]
        public int? Pagina { get; set; }

        /// <summary>
        /// Gets or sets um dos valores presentes da Tabela de Funções
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Funcao")]
        public string Funcao { get; set; }

        /// <summary>
        /// Gets or sets lista com as funcoes desejadas.
        /// Mesma funcionalidade do campo Funcao, podendo indicar uma série de
        /// valores.
        /// Indicar valores presentes da Tabela de Funções.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ListaFuncoes")]
        public System.Collections.Generic.IList<string> ListaFuncoes { get; set; }

        /// <summary>
        /// Gets or sets um dos valores presentes da Tabela de Cidades. Enviar
        /// no formato nome-da-cidade/UF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Gets or sets lista de disponibilidades
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Disponibilidades")]
        public System.Collections.Generic.IList<string> Disponibilidades { get; set; }

        /// <summary>
        /// Gets or sets palavra chave a ser pesquisada em todo o currículo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PalavraChave")]
        public string PalavraChave { get; set; }

        /// <summary>
        /// Gets or sets currículos com essa(s) palavra(s) chave(s) serão
        /// excluídos do resultado.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ExcluirPalavraChave")]
        public string ExcluirPalavraChave { get; set; }

        /// <summary>
        /// Gets or sets palavra chave a ser pesquisada nas experiências.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PalavraChaveExperiencia")]
        public string PalavraChaveExperiencia { get; set; }

        /// <summary>
        /// Gets or sets pesquisa a função nas exoeriências do usuário.
        /// Recomenda-se informar um dos valores presentes da Tabela de
        /// Funções
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FuncaoExperiencia")]
        public string FuncaoExperiencia { get; set; }

        /// <summary>
        /// Gets or sets sigla de um dos estados brasileiros
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Gets or sets um dos valores presentes na Tabela Escolaridades.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Escolaridade")]
        public string Escolaridade { get; set; }

        /// <summary>
        /// Gets or sets sexo informado no currículo. Possible values include:
        /// 'Masculino', 'Feminino'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Sexo")]
        public string Sexo { get; set; }

        /// <summary>
        /// Gets or sets idade Mínima informada no currículo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdadeMinima")]
        public int? IdadeMinima { get; set; }

        /// <summary>
        /// Gets or sets idade Máxima informada no currículo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdadeMaxima")]
        public int? IdadeMaxima { get; set; }

        /// <summary>
        /// Gets or sets salário Mínimo informada no currículo no formato
        /// americano.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMinimo")]
        public double? SalarioMinimo { get; set; }

        /// <summary>
        /// Gets or sets salário Máximo informada no currículo no formato
        /// americano.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMaximo")]
        public double? SalarioMaximo { get; set; }

        /// <summary>
        /// Gets or sets quantidade de experiência mínima em meses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "QuantidadeExperiencia")]
        public long? QuantidadeExperiencia { get; set; }

        /// <summary>
        /// Gets or sets lista com os valores presentes no Enumerador Idiomas
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Idioma")]
        public System.Collections.Generic.IList<string> Idioma { get; set; }

        /// <summary>
        /// Gets or sets indicar o código do currículo (BNE), CPF ou Nome.
        /// Utilizado para buscar um currículo específico.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CodCPFNome")]
        public string CodCPFNome { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes no Enumerador Estado
        /// Civil.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EstadoCivil")]
        public string EstadoCivil { get; set; }

        /// <summary>
        /// Gets or sets bairro do candidato.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// Gets or sets endereço do candidato.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Logradouro")]
        public string Logradouro { get; set; }

        /// <summary>
        /// Gets or sets CEP mínimo do endereço do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CEPMinimo")]
        public string CEPMinimo { get; set; }

        /// <summary>
        /// Gets or sets CEP máximo do endereço do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CEPMaximo")]
        public string CEPMaximo { get; set; }

        /// <summary>
        /// Gets or sets curso técnico ou de graduação desejado
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CursoTecnicoGraduacao")]
        public string CursoTecnicoGraduacao { get; set; }

        /// <summary>
        /// Gets or sets instituição de ensino do curso técnico ou de
        /// graduação desejada
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "InstituicaoTecnicoGraduacao")]
        public string InstituicaoTecnicoGraduacao { get; set; }

        /// <summary>
        /// Gets or sets cursos adicionais.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CursoOutrosCursos")]
        public string CursoOutrosCursos { get; set; }

        /// <summary>
        /// Gets or sets instituição do curso adicional
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "InstituicaoOutrosCursos")]
        public string InstituicaoOutrosCursos { get; set; }

        /// <summary>
        /// Gets or sets empresa presente nas experiências
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "EmpresaQueJaTrabalhou")]
        public string EmpresaQueJaTrabalhou { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes na tabela Areas
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "AreaEmpresaQueJaTrabalhou")]
        public string AreaEmpresaQueJaTrabalhou { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes na tabela
        /// CategoriasHabilitacao
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CategoriaHabilitacao")]
        public string CategoriaHabilitacao { get; set; }

        /// <summary>
        /// Gets or sets DDD do telefone do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DDDTelefone")]
        public string DDDTelefone { get; set; }

        /// <summary>
        /// Gets or sets número do telefone do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NumeroTelefone")]
        public string NumeroTelefone { get; set; }

        /// <summary>
        /// Gets or sets e-mail do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes na tabela
        /// Deficiencias
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Deficiencia")]
        public string Deficiencia { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes na tabela
        /// TiposVeiculo
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TipoVeiculo")]
        public string TipoVeiculo { get; set; }

        /// <summary>
        /// Gets or sets indicar um dos valores presentes na tabela Racas
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Raca")]
        public string Raca { get; set; }

        /// <summary>
        /// Gets or sets indicar true, se desejar filtrar candidatos com filhos
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PossuiFilhos")]
        public bool? PossuiFilhos { get; set; }

        /// <summary>
        /// Gets or sets indicar true, se desejar filtrar candidatos com
        /// perfil de estágio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "QueroContratarEstagiarios")]
        public bool? QueroContratarEstagiarios { get; set; }

        /// <summary>
        /// Gets or sets parametros de pesquisa para formacoes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Formacao")]
        public PesquisaCurriculoFormacao Formacao { get; set; }

        /// <summary>
        /// Gets or sets CPF do usuário que está efetuando a requisição
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CPF")]
        public string CPF { get; set; }

        /// <summary>
        /// Gets or sets data de nascimento do usuário que está efetuando a
        /// requisição
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataNascimento")]
        public System.DateTime? DataNascimento { get; set; }

    }
}
