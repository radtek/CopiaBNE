// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    /// <summary>
    /// Candidato a que será exportado para o BNE
    /// </summary>
    public partial class ExportaCandidatoParam
    {
        /// <summary>
        /// Initializes a new instance of the ExportaCandidatoParam class.
        /// </summary>
        public ExportaCandidatoParam() { }

        /// <summary>
        /// Initializes a new instance of the ExportaCandidatoParam class.
        /// </summary>
        /// <param name="cPF">Número de CPF do candidato.</param>
        /// <param name="dataNascimento">Data de Nascimento do candidato.
        /// Padrão (YYYY-MM-DD)</param>
        /// <param name="celularDDD">Número de DDD com dois caracteres.</param>
        /// <param name="email">Endereço de email do candidato.</param>
        /// <param name="nome">Nome do candidato com no máximo 100
        /// caracteres.</param>
        /// <param name="cidade">Formato "NomeCidade/UF"</param>
        /// <param name="escolaridade"><br />
        /// Código da escolaridade definido na tabela de
        /// plataforma.</param>
        /// <param name="funcoes">Array com as funções pretendidas.</param>
        /// <param name="pretensaoSalarial">Salário desejado pelo
        /// candidato</param>
        /// <param name="origem">Origem dos dados do candidato</param>
        /// <param name="origemURL">Url de origem SINE</param>
        /// <param name="uTMSource">UTMSource</param>
        /// <param name="desPalavraChave">DesPalavraChave</param>
        /// <param name="sexo">1 -&gt; Masculino <br />2-&gt; Feminino</param>
        /// <param name="bairro">Bairro</param>
        public ExportaCandidatoParam(double cPF, System.DateTime dataNascimento, string celularDDD, string celular, string email, string nome, string cidade, int escolaridade, System.Collections.Generic.IList<ExportaCandidatoFuncoesParam> funcoes, double pretensaoSalarial, string origem, string origemURL, string uTMSource, string desPalavraChave, int? sexo = default(int?), string bairro = default(string), System.Collections.Generic.IList<ExportaCandidatoExperienciaParam> experiencias = default(System.Collections.Generic.IList<ExportaCandidatoExperienciaParam>), System.Collections.Generic.IList<ExportaCandidatoFormacoesParam> formacoes = default(System.Collections.Generic.IList<ExportaCandidatoFormacoesParam>))
        {
            CPF = cPF;
            DataNascimento = dataNascimento;
            CelularDDD = celularDDD;
            Celular = celular;
            Email = email;
            Nome = nome;
            Sexo = sexo;
            Cidade = cidade;
            Escolaridade = escolaridade;
            Funcoes = funcoes;
            PretensaoSalarial = pretensaoSalarial;
            Origem = origem;
            OrigemURL = origemURL;
            UTMSource = uTMSource;
            DesPalavraChave = desPalavraChave;
            Bairro = bairro;
            Experiencias = experiencias;
            Formacoes = formacoes;
        }

        /// <summary>
        /// Gets or sets número de CPF do candidato.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CPF")]
        public double CPF { get; set; }

        /// <summary>
        /// Gets or sets data de Nascimento do candidato. Padrão (YYYY-MM-DD)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataNascimento")]
        public System.DateTime DataNascimento { get; set; }

        /// <summary>
        /// Gets or sets número de DDD com dois caracteres.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CelularDDD")]
        public string CelularDDD { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Celular")]
        public string Celular { get; set; }

        /// <summary>
        /// Gets or sets endereço de email do candidato.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets nome do candidato com no máximo 100 caracteres.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or sets 1 -&amp;gt; Masculino &lt;br /&gt;2-&amp;gt; Feminino
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Sexo")]
        public int? Sexo { get; set; }

        /// <summary>
        /// Gets or sets formato "NomeCidade/UF"
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Cidade")]
        public string Cidade { get; set; }

        /// <summary>
        /// Gets or sets &lt;br /&gt;
        /// Código da escolaridade definido na tabela de
        /// plataforma.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Escolaridade")]
        public int Escolaridade { get; set; }

        /// <summary>
        /// Gets or sets array com as funções pretendidas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Funcoes")]
        public System.Collections.Generic.IList<ExportaCandidatoFuncoesParam> Funcoes { get; set; }

        /// <summary>
        /// Gets or sets salário desejado pelo candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "PretensaoSalarial")]
        public double PretensaoSalarial { get; set; }

        /// <summary>
        /// Gets or sets origem dos dados do candidato
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Origem")]
        public string Origem { get; set; }

        /// <summary>
        /// Gets or sets url de origem SINE
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "OrigemURL")]
        public string OrigemURL { get; set; }

        /// <summary>
        /// Gets or sets uTMSource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UTMSource")]
        public string UTMSource { get; set; }

        /// <summary>
        /// Gets or sets desPalavraChave
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DesPalavraChave")]
        public string DesPalavraChave { get; set; }

        /// <summary>
        /// Gets or sets bairro
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Bairro")]
        public string Bairro { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Experiencias")]
        public System.Collections.Generic.IList<ExportaCandidatoExperienciaParam> Experiencias { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Formacoes")]
        public System.Collections.Generic.IList<ExportaCandidatoFormacoesParam> Formacoes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CelularDDD == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "CelularDDD");
            }
            if (Celular == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Celular");
            }
            if (Email == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Email");
            }
            if (Nome == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Nome");
            }
            if (Cidade == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Cidade");
            }
            if (Funcoes == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Funcoes");
            }
            if (Origem == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Origem");
            }
            if (OrigemURL == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OrigemURL");
            }
            if (UTMSource == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UTMSource");
            }
            if (DesPalavraChave == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DesPalavraChave");
            }
            if (this.CelularDDD != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.CelularDDD, "^[1-9][0-9]"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "CelularDDD", "^[1-9][0-9]");
                }
            }
            if (this.Celular != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Celular, "(^[9][0-9][0-9]{7})|(^[6-9][0-9]{7})"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Celular", "(^[9][0-9][0-9]{7})|(^[6-9][0-9]{7})");
                }
            }
            if (this.Email != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Email, "(^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,4}(?:\\.[a-z]{2})?)$)"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Email", "(^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,4}(?:\\.[a-z]{2})?)$)");
                }
            }
            if (this.Nome != null)
            {
                if (this.Nome.Length > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Nome", 100);
                }
                if (this.Nome.Length < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "Nome", 0);
                }
            }
            if (this.Experiencias != null)
            {
                foreach (var element in this.Experiencias)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
