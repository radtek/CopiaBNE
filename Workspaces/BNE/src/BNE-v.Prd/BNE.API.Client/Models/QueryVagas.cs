// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client.Models
{
    using System.Linq;

    /// <summary>
    /// Parâmetros para a pesquisa de vaga
    /// </summary>
    public partial class QueryVagas
    {
        /// <summary>
        /// Initializes a new instance of the QueryVagas class.
        /// </summary>
        public QueryVagas() { }

        /// <summary>
        /// Initializes a new instance of the QueryVagas class.
        /// </summary>
        /// <param name="pagina">Página a ser retornada. Iniciando em
        /// 1.</param>
        /// <param name="registrosPorPagina">Número de registros por
        /// página</param>
        /// <param name="query">Pesquisa textual</param>
        /// <param name="salarioMinimo">Salário mínimo oferecido pela
        /// vaga</param>
        /// <param name="salarioMaximo">Salário máximo oferecido pela
        /// vaga</param>
        /// <param name="tipoVinculo">Tipo de vínculo desejado</param>
        /// <param name="funcao">Funcão da vaga</param>
        /// <param name="area">Área de atuação</param>
        /// <param name="escolaridade">Escolaridade</param>
        /// <param name="deficiencia">Deficiência para vagas BNE</param>
        /// <param name="disponibilidade">Disponibilidade requerida para a
        /// vaga</param>
        /// <param name="siglaEstado">Nomes das cidades desejadas</param>
        /// <param name="nomeCidade">Nomes das cidades desejadas</param>
        /// <param name="empresa">Nomes das empresas anunciantes</param>
        /// <param name="dataInicio">Limite inferior para a abertura da
        /// vaga</param>
        /// <param name="dataFim">Limite superior para a abertura da
        /// vaga</param>
        /// <param name="idOrigem">Origem das vagas, empresas que possuem
        /// STC</param>
        /// <param name="oportunidade">Trazer oportunidade (vagas abertas a
        /// mais de 60 dias)</param>
        /// <param name="ordenacao">Ordenação ex: "Dta_Abertura asc,
        /// Des_Funcao desc"</param>
        /// <param name="curso">Cursos pesquisados com like</param>
        /// <param name="idCurso">Pesquisa acertiva dos curso</param>
        /// <param name="curriculo">Curriculo do BNE - para não trazer as
        /// vagas da empresa que o candidato bloqueou.</param>
        /// <param name="ofereceCurso">Vagas de empresa que oferecem
        /// curso</param>
        /// <param name="funcaoAgrupadora">Vai retoranar as vagas com funções
        /// similares a pesquisada.</param>
        /// <param name="cidadeRegiao">Alem das vaga da cidade ira trazer as
        /// vagas da região metropolitana.</param>
        /// <param name="idfFilial">Buscar vagas da filial</param>
        /// <param name="confidencial">Mostrar vagas Confidenciais (vaga de
        /// Empresas que optaram a não aparecer como anunciante na
        /// vaga)</param>
        /// <param name="campanha">Vaga de campanha</param>
        /// <param name="usuarioFilial">Quem Anunciou a vaga.</param>
        /// <param name="facetField">Campos para os quais a totalização deve
        /// ser retornada</param>
        public QueryVagas(int? pagina = default(int?), int? registrosPorPagina = default(int?), string query = default(string), double? salarioMinimo = default(double?), double? salarioMaximo = default(double?), System.Collections.Generic.IList<string> tipoVinculo = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> funcao = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> area = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> escolaridade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> deficiencia = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> disponibilidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> siglaEstado = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nomeCidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> empresa = default(System.Collections.Generic.IList<string>), System.DateTime? dataInicio = default(System.DateTime?), System.DateTime? dataFim = default(System.DateTime?), System.Collections.Generic.IList<int?> idOrigem = default(System.Collections.Generic.IList<int?>), bool? oportunidade = default(bool?), string ordenacao = default(string), System.Collections.Generic.IList<string> curso = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<int?> idCurso = default(System.Collections.Generic.IList<int?>), int? curriculo = default(int?), bool? ofereceCurso = default(bool?), int? funcaoAgrupadora = default(int?), int? cidadeRegiao = default(int?), int? idfFilial = default(int?), bool? confidencial = default(bool?), bool? campanha = default(bool?), System.Collections.Generic.IList<int?> usuarioFilial = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<string> facetField = default(System.Collections.Generic.IList<string>))
        {
            Pagina = pagina;
            RegistrosPorPagina = registrosPorPagina;
            Query = query;
            SalarioMinimo = salarioMinimo;
            SalarioMaximo = salarioMaximo;
            TipoVinculo = tipoVinculo;
            Funcao = funcao;
            Area = area;
            Escolaridade = escolaridade;
            Deficiencia = deficiencia;
            Disponibilidade = disponibilidade;
            SiglaEstado = siglaEstado;
            NomeCidade = nomeCidade;
            Empresa = empresa;
            DataInicio = dataInicio;
            DataFim = dataFim;
            IdOrigem = idOrigem;
            Oportunidade = oportunidade;
            Ordenacao = ordenacao;
            Curso = curso;
            IdCurso = idCurso;
            Curriculo = curriculo;
            OfereceCurso = ofereceCurso;
            FuncaoAgrupadora = funcaoAgrupadora;
            CidadeRegiao = cidadeRegiao;
            IdfFilial = idfFilial;
            Confidencial = confidencial;
            Campanha = campanha;
            UsuarioFilial = usuarioFilial;
            FacetField = facetField;
        }

        /// <summary>
        /// Gets or sets página a ser retornada. Iniciando em 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Pagina")]
        public int? Pagina { get; set; }

        /// <summary>
        /// Gets or sets número de registros por página
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "RegistrosPorPagina")]
        public int? RegistrosPorPagina { get; set; }

        /// <summary>
        /// Gets or sets pesquisa textual
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Query")]
        public string Query { get; set; }

        /// <summary>
        /// Gets or sets salário mínimo oferecido pela vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMinimo")]
        public double? SalarioMinimo { get; set; }

        /// <summary>
        /// Gets or sets salário máximo oferecido pela vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SalarioMaximo")]
        public double? SalarioMaximo { get; set; }

        /// <summary>
        /// Gets or sets tipo de vínculo desejado
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TipoVinculo")]
        public System.Collections.Generic.IList<string> TipoVinculo { get; set; }

        /// <summary>
        /// Gets or sets funcão da vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Funcao")]
        public System.Collections.Generic.IList<string> Funcao { get; set; }

        /// <summary>
        /// Gets or sets área de atuação
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Area")]
        public System.Collections.Generic.IList<string> Area { get; set; }

        /// <summary>
        /// Gets or sets escolaridade
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Escolaridade")]
        public System.Collections.Generic.IList<string> Escolaridade { get; set; }

        /// <summary>
        /// Gets or sets deficiência para vagas BNE
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Deficiencia")]
        public System.Collections.Generic.IList<string> Deficiencia { get; set; }

        /// <summary>
        /// Gets or sets disponibilidade requerida para a vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Disponibilidade")]
        public System.Collections.Generic.IList<string> Disponibilidade { get; set; }

        /// <summary>
        /// Gets or sets nomes das cidades desejadas
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "SiglaEstado")]
        public System.Collections.Generic.IList<string> SiglaEstado { get; set; }

        /// <summary>
        /// Gets or sets nomes das cidades desejadas
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "NomeCidade")]
        public System.Collections.Generic.IList<string> NomeCidade { get; set; }

        /// <summary>
        /// Gets or sets nomes das empresas anunciantes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Empresa")]
        public System.Collections.Generic.IList<string> Empresa { get; set; }

        /// <summary>
        /// Gets or sets limite inferior para a abertura da vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataInicio")]
        public System.DateTime? DataInicio { get; set; }

        /// <summary>
        /// Gets or sets limite superior para a abertura da vaga
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DataFim")]
        public System.DateTime? DataFim { get; set; }

        /// <summary>
        /// Gets or sets origem das vagas, empresas que possuem STC
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdOrigem")]
        public System.Collections.Generic.IList<int?> IdOrigem { get; set; }

        /// <summary>
        /// Gets or sets trazer oportunidade (vagas abertas a mais de 60 dias)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Oportunidade")]
        public bool? Oportunidade { get; set; }

        /// <summary>
        /// Gets or sets ordenação ex: "Dta_Abertura asc, Des_Funcao desc"
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Ordenacao")]
        public string Ordenacao { get; set; }

        /// <summary>
        /// Gets or sets cursos pesquisados com like
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Curso")]
        public System.Collections.Generic.IList<string> Curso { get; set; }

        /// <summary>
        /// Gets or sets pesquisa acertiva dos curso
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdCurso")]
        public System.Collections.Generic.IList<int?> IdCurso { get; set; }

        /// <summary>
        /// Gets or sets curriculo do BNE - para não trazer as vagas da
        /// empresa que o candidato bloqueou.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Curriculo")]
        public int? Curriculo { get; set; }

        /// <summary>
        /// Gets or sets vagas de empresa que oferecem curso
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "OfereceCurso")]
        public bool? OfereceCurso { get; set; }

        /// <summary>
        /// Gets or sets vai retoranar as vagas com funções similares a
        /// pesquisada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FuncaoAgrupadora")]
        public int? FuncaoAgrupadora { get; set; }

        /// <summary>
        /// Gets or sets alem das vaga da cidade ira trazer as vagas da região
        /// metropolitana.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "CidadeRegiao")]
        public int? CidadeRegiao { get; set; }

        /// <summary>
        /// Gets or sets buscar vagas da filial
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IdfFilial")]
        public int? IdfFilial { get; set; }

        /// <summary>
        /// Gets or sets mostrar vagas Confidenciais (vaga de Empresas que
        /// optaram a não aparecer como anunciante na vaga)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Confidencial")]
        public bool? Confidencial { get; set; }

        /// <summary>
        /// Gets or sets vaga de campanha
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Campanha")]
        public bool? Campanha { get; set; }

        /// <summary>
        /// Gets or sets quem Anunciou a vaga.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "UsuarioFilial")]
        public System.Collections.Generic.IList<int?> UsuarioFilial { get; set; }

        /// <summary>
        /// Gets or sets campos para os quais a totalização deve ser retornada
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "FacetField")]
        public System.Collections.Generic.IList<string> FacetField { get; set; }

    }
}
