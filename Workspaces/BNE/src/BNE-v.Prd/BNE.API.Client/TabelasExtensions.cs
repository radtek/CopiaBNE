// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Tabelas.
    /// </summary>
    public static partial class TabelasExtensions
    {
            /// <summary>
            /// Lista de funções.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa das funções do BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            public static System.Collections.Generic.IList<string> FuncoesBynomeParcialnumeroRegistros(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).FuncoesBynomeParcialnumeroRegistrosAsync(nomeParcial, numeroRegistros), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de funções.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa das funções do BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> FuncoesBynomeParcialnumeroRegistrosAsync(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.FuncoesBynomeParcialnumeroRegistrosWithHttpMessagesAsync(nomeParcial, numeroRegistros, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Cidades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa de cidades no BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            public static System.Collections.Generic.IList<string> CidadesBynomeParcialnumeroRegistros(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).CidadesBynomeParcialnumeroRegistrosAsync(nomeParcial, numeroRegistros), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Cidades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa de cidades no BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> CidadesBynomeParcialnumeroRegistrosAsync(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CidadesBynomeParcialnumeroRegistrosWithHttpMessagesAsync(nomeParcial, numeroRegistros, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de cursos.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa dos cursos do BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            public static System.Collections.Generic.IList<string> CursosBynomeParcialnumeroRegistros(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).CursosBynomeParcialnumeroRegistrosAsync(nomeParcial, numeroRegistros), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de cursos.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa dos cursos do BNE.
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> CursosBynomeParcialnumeroRegistrosAsync(this ITabelas operations, string nomeParcial, int? numeroRegistros = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CursosBynomeParcialnumeroRegistrosWithHttpMessagesAsync(nomeParcial, numeroRegistros, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Instituições de insino.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa das instituições.
            /// </param>
            /// <param name='nivelCurso'>
            /// Nível do curso a ser considerado. Envie vazio caso seja indiferente.
            /// Possible values include: 'Tecnico', 'Tecnologo', 'Graduacaoo',
            /// 'PosGraduacao', 'Mestrado', 'Doutorado', 'PosDoutorado', 'Aperfeicoamento'
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado. Default: 10.
            /// </param>
            public static System.Collections.Generic.IList<string> InstituicoesBynomeParcialnivelCursonumeroRegistros(this ITabelas operations, string nomeParcial, string nivelCurso = default(string), int? numeroRegistros = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).InstituicoesBynomeParcialnivelCursonumeroRegistrosAsync(nomeParcial, nivelCurso, numeroRegistros), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Instituições de insino.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nomeParcial'>
            /// Nome parcial para pesquisa das instituições.
            /// </param>
            /// <param name='nivelCurso'>
            /// Nível do curso a ser considerado. Envie vazio caso seja indiferente.
            /// Possible values include: 'Tecnico', 'Tecnologo', 'Graduacaoo',
            /// 'PosGraduacao', 'Mestrado', 'Doutorado', 'PosDoutorado', 'Aperfeicoamento'
            /// </param>
            /// <param name='numeroRegistros'>
            /// Número de registros a ser retornado. Default: 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> InstituicoesBynomeParcialnivelCursonumeroRegistrosAsync(this ITabelas operations, string nomeParcial, string nivelCurso = default(string), int? numeroRegistros = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.InstituicoesBynomeParcialnivelCursonumeroRegistrosWithHttpMessagesAsync(nomeParcial, nivelCurso, numeroRegistros, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Escolaridades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> Escolaridades(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).EscolaridadesAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Escolaridades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> EscolaridadesAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EscolaridadesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de áreas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> Areas(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).AreasAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de áreas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> AreasAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AreasWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Categorias de Habilitação
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> CategoriasHabilitacao(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).CategoriasHabilitacaoAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Categorias de Habilitação
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> CategoriasHabilitacaoAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CategoriasHabilitacaoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Tipos de Veículo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> TiposVeiculos(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).TiposVeiculosAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Tipos de Veículo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> TiposVeiculosAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.TiposVeiculosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Deficiências
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> Deficiencias(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).DeficienciasAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Deficiências
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> DeficienciasAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeficienciasWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Raças
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> Racas(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).RacasAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Raças
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> RacasAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RacasWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Estados Civis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> EstadosCivis(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).EstadosCivisAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Estados Civis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> EstadosCivisAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.EstadosCivisWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista de Idiomas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IList<string> Idiomas(this ITabelas operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITabelas)s).IdiomasAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista de Idiomas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> IdiomasAsync(this ITabelas operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.IdiomasWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
