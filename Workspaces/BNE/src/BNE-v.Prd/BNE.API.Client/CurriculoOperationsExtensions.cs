// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for CurriculoOperations.
    /// </summary>
    public static partial class CurriculoOperationsExtensions
    {
            /// <summary>
            /// Obtem os dados do cadastro do currículo.
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado para a obtenção dos dados de cadastro do candidato.
            /// O currículo retornado será o pertencente ao CPF informado na
            /// apikey ou do CPF informado na query string.
            /// Esse endpoint deve ser utilizado para a exibição dos dados
            /// exclusivamente aos candidatos ou para sistemas internos do BNE.
            /// Para a exibição de currículos às empresas, o endpoint
            /// /v1.0/Curriculo/ObterCV deve ser utilizado.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// CPF do currículo a ser carregado. Somente usuários administradores podem
            /// informar esse parâmetro.
            /// </param>
            public static CadastroCurriculo GetCadastroCVBycpf(this ICurriculoOperations operations, double? cpf = default(double?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).GetCadastroCVBycpfAsync(cpf), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtem os dados do cadastro do currículo.
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado para a obtenção dos dados de cadastro do candidato.
            /// O currículo retornado será o pertencente ao CPF informado na
            /// apikey ou do CPF informado na query string.
            /// Esse endpoint deve ser utilizado para a exibição dos dados
            /// exclusivamente aos candidatos ou para sistemas internos do BNE.
            /// Para a exibição de currículos às empresas, o endpoint
            /// /v1.0/Curriculo/ObterCV deve ser utilizado.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// CPF do currículo a ser carregado. Somente usuários administradores podem
            /// informar esse parâmetro.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CadastroCurriculo> GetCadastroCVBycpfAsync(this ICurriculoOperations operations, double? cpf = default(double?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetCadastroCVBycpfWithHttpMessagesAsync(cpf, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Atualiza um currículo
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado somente para a atualiza de currículos.
            /// O currículo alterado será o pertencente ao CPF informado na
            /// apikey.
            /// As propriedades são opcionais e não serão atualizadas caso não
            /// sejam informadas.
            /// Para apagar o valor da propriedade, indique um valor vazio na
            /// atualização.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curriculo'>
            /// Dados do currículo para atualização
            /// </param>
            public static ResultadoCadastroCVDTO PutCadastroCVBycurriculo(this ICurriculoOperations operations, CadastroCurriculo curriculo)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).PutCadastroCVBycurriculoAsync(curriculo), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Atualiza um currículo
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado somente para a atualiza de currículos.
            /// O currículo alterado será o pertencente ao CPF informado na
            /// apikey.
            /// As propriedades são opcionais e não serão atualizadas caso não
            /// sejam informadas.
            /// Para apagar o valor da propriedade, indique um valor vazio na
            /// atualização.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curriculo'>
            /// Dados do currículo para atualização
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCadastroCVDTO> PutCadastroCVBycurriculoAsync(this ICurriculoOperations operations, CadastroCurriculo curriculo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PutCadastroCVBycurriculoWithHttpMessagesAsync(curriculo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cadastra um novo currículo
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado somente para a inserção de novos currículos.
            /// Se um currículo já existe for informado, a chamada será
            /// respondida com um erro.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curriculo'>
            /// </param>
            public static ResultadoCadastroCVDTO PostCadastroCVBycurriculo(this ICurriculoOperations operations, CadastroCurriculo curriculo)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).PostCadastroCVBycurriculoAsync(curriculo), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cadastra um novo currículo
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado somente para a inserção de novos currículos.
            /// Se um currículo já existe for informado, a chamada será
            /// respondida com um erro.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curriculo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCadastroCVDTO> PostCadastroCVBycurriculoAsync(this ICurriculoOperations operations, CadastroCurriculo curriculo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostCadastroCVBycurriculoWithHttpMessagesAsync(curriculo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Atualiza a foto do currículo
            /// </summary>
            /// <remarks>
            /// A foto será definida para o pertencente ao CPF informado na apikey.
            /// O tamanho mínimo para uma imagem é de 100px X 100px.
            /// Para apagar a foto presente no currículo, efetue um POST sem
            /// nenhum dado.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            public static ResultadoCadastroCVDTO PostFotoByfile(this ICurriculoOperations operations, System.IO.Stream file = default(System.IO.Stream))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).PostFotoByfileAsync(file), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Atualiza a foto do currículo
            /// </summary>
            /// <remarks>
            /// A foto será definida para o pertencente ao CPF informado na apikey.
            /// O tamanho mínimo para uma imagem é de 100px X 100px.
            /// Para apagar a foto presente no currículo, efetue um POST sem
            /// nenhum dado.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCadastroCVDTO> PostFotoByfileAsync(this ICurriculoOperations operations, System.IO.Stream file = default(System.IO.Stream), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PostFotoByfileWithHttpMessagesAsync(file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retorna o curriculo selecionado pelo usuario a partir do CPF e Data de
            /// Nascimento.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// Cpf do curriculo desejado
            /// </param>
            /// <param name='nascimento'>
            /// Data de nascimento do currículo desejado
            /// </param>
            public static ResultadoPesquisaCurriculoCompleto ObterCVPorCpfBycpfnascimento(this ICurriculoOperations operations, double cpf, System.DateTime nascimento)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).ObterCVPorCpfBycpfnascimentoAsync(cpf, nascimento), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retorna o curriculo selecionado pelo usuario a partir do CPF e Data de
            /// Nascimento.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// Cpf do curriculo desejado
            /// </param>
            /// <param name='nascimento'>
            /// Data de nascimento do currículo desejado
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPesquisaCurriculoCompleto> ObterCVPorCpfBycpfnascimentoAsync(this ICurriculoOperations operations, double cpf, System.DateTime nascimento, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterCVPorCpfBycpfnascimentoWithHttpMessagesAsync(cpf, nascimento, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retorna o curriculo selecionado pelo usuario a partir do IdCurriculo.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idCurriculo'>
            /// Id do currículo a ser retornado.
            /// </param>
            /// <param name='flgDadosdeContato'>
            /// Indica se deseja que os dados de contato devem ser retornados. Se true, a
            /// consulta será contabilizada como visualização do currículo e será
            /// descontada do plano do cliente.
            /// </param>
            public static ResultadoPesquisaCurriculoCompleto ObterCVByIdCurriculoFlgDadosdeContato(this ICurriculoOperations operations, int idCurriculo, bool flgDadosdeContato)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).ObterCVByIdCurriculoFlgDadosdeContatoAsync(idCurriculo, flgDadosdeContato), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retorna o curriculo selecionado pelo usuario a partir do IdCurriculo.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idCurriculo'>
            /// Id do currículo a ser retornado.
            /// </param>
            /// <param name='flgDadosdeContato'>
            /// Indica se deseja que os dados de contato devem ser retornados. Se true, a
            /// consulta será contabilizada como visualização do currículo e será
            /// descontada do plano do cliente.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPesquisaCurriculoCompleto> ObterCVByIdCurriculoFlgDadosdeContatoAsync(this ICurriculoOperations operations, int idCurriculo, bool flgDadosdeContato, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterCVByIdCurriculoFlgDadosdeContatoWithHttpMessagesAsync(idCurriculo, flgDadosdeContato, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retorna o cadastro do curriculo selecionado pelo usuario a partir do
            /// IdCurriculo.
            /// </summary>
            /// <remarks>
            /// Esse endpoint deve ser utilizado para que a selecionadora tenha acesso às
            /// mesmas informações do cadastro do currículo do candidato.
            /// Para recuperar as informações do currículos para o CPF informado na
            /// apikey, utilize o endpoint CadastroCv com o method GET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idCurriculo'>
            /// Id do currículo a ser retornado.
            /// </param>
            /// <param name='flgDadosdeContato'>
            /// Indica se deseja que os dados de contato devem ser retornados. Se true, a
            /// consulta será contabilizada como visualização do currículo e será
            /// descontada do plano do cliente.
            /// </param>
            public static CadastroCurriculo ObterCadastroCVByIdCurriculoFlgDadosdeContato(this ICurriculoOperations operations, int idCurriculo, bool flgDadosdeContato)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).ObterCadastroCVByIdCurriculoFlgDadosdeContatoAsync(idCurriculo, flgDadosdeContato), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retorna o cadastro do curriculo selecionado pelo usuario a partir do
            /// IdCurriculo.
            /// </summary>
            /// <remarks>
            /// Esse endpoint deve ser utilizado para que a selecionadora tenha acesso às
            /// mesmas informações do cadastro do currículo do candidato.
            /// Para recuperar as informações do currículos para o CPF informado na
            /// apikey, utilize o endpoint CadastroCv com o method GET.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idCurriculo'>
            /// Id do currículo a ser retornado.
            /// </param>
            /// <param name='flgDadosdeContato'>
            /// Indica se deseja que os dados de contato devem ser retornados. Se true, a
            /// consulta será contabilizada como visualização do currículo e será
            /// descontada do plano do cliente.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CadastroCurriculo> ObterCadastroCVByIdCurriculoFlgDadosdeContatoAsync(this ICurriculoOperations operations, int idCurriculo, bool flgDadosdeContato, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterCadastroCVByIdCurriculoFlgDadosdeContatoWithHttpMessagesAsync(idCurriculo, flgDadosdeContato, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// </param>
            public static object DownloadArquivoBycpf(this ICurriculoOperations operations, double cpf)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).DownloadArquivoBycpfAsync(cpf), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DownloadArquivoBycpfAsync(this ICurriculoOperations operations, double cpf, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DownloadArquivoBycpfWithHttpMessagesAsync(cpf, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retorna uma lista de currículos baseada nos parâmetros informados.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filtros'>
            /// Objeto com os filtros a serem aplicados na pesquisa de curriculos
            /// </param>
            public static ResultadoPesquisaCurriculo PesquisaAvancadaByfiltros(this ICurriculoOperations operations, PesquisaCurriculo filtros)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).PesquisaAvancadaByfiltrosAsync(filtros), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retorna uma lista de currículos baseada nos parâmetros informados.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filtros'>
            /// Objeto com os filtros a serem aplicados na pesquisa de curriculos
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPesquisaCurriculo> PesquisaAvancadaByfiltrosAsync(this ICurriculoOperations operations, PesquisaCurriculo filtros, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.PesquisaAvancadaByfiltrosWithHttpMessagesAsync(filtros, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Valida o MimeType de uma imagem, ou se consegue abrir o arquivo
            /// corretamente usando o objeto Image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ba'>
            /// A imagem
            /// </param>
            public static bool? ValidateImageByba(this ICurriculoOperations operations, byte[] ba)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ICurriculoOperations)s).ValidateImageBybaAsync(ba), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Valida o MimeType de uma imagem, ou se consegue abrir o arquivo
            /// corretamente usando o objeto Image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ba'>
            /// A imagem
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> ValidateImageBybaAsync(this ICurriculoOperations operations, byte[] ba, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ValidateImageBybaWithHttpMessagesAsync(ba, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
