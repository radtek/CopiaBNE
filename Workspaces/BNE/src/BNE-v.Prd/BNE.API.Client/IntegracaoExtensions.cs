// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Integracao.
    /// </summary>
    public static partial class IntegracaoExtensions
    {
            /// <summary>
            /// Exporta um novo candidato para a base do BNE
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='param'>
            /// Dados do candidato que será exportado para o BNE.
            /// </param>
            public static ExportaCandidatoResult ExportaCandidatoByparam(this IIntegracao operations, ExportaCandidatoParam param)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IIntegracao)s).ExportaCandidatoByparamAsync(param), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exporta um novo candidato para a base do BNE
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='param'>
            /// Dados do candidato que será exportado para o BNE.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ExportaCandidatoResult> ExportaCandidatoByparamAsync(this IIntegracao operations, ExportaCandidatoParam param, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ExportaCandidatoByparamWithHttpMessagesAsync(param, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retorna a url para vaga com o usuário já logado.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            /// <param name='numCPF'>
            /// </param>
            public static CandidaturaURLResult CandidaturaURLByIdVagaNumCPF(this IIntegracao operations, int idVaga, double numCPF)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IIntegracao)s).CandidaturaURLByIdVagaNumCPFAsync(idVaga, numCPF), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retorna a url para vaga com o usuário já logado.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            /// <param name='numCPF'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CandidaturaURLResult> CandidaturaURLByIdVagaNumCPFAsync(this IIntegracao operations, int idVaga, double numCPF, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CandidaturaURLByIdVagaNumCPFWithHttpMessagesAsync(idVaga, numCPF, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Atualiza um usuário já cadastrado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='commmand'>
            /// Dados do usuário
            /// </param>
            public static bool? AtualizaUsuarioBycommmand(this IIntegracao operations, AtualizaUsuario commmand)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IIntegracao)s).AtualizaUsuarioBycommmandAsync(commmand), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Atualiza um usuário já cadastrado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='commmand'>
            /// Dados do usuário
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<bool?> AtualizaUsuarioBycommmandAsync(this IIntegracao operations, AtualizaUsuario commmand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AtualizaUsuarioBycommmandWithHttpMessagesAsync(commmand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// </param>
            public static object ExportarCandidatoSINEBycpf(this IIntegracao operations, double cpf)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IIntegracao)s).ExportarCandidatoSINEBycpfAsync(cpf), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cpf'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> ExportarCandidatoSINEBycpfAsync(this IIntegracao operations, double cpf, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ExportarCandidatoSINEBycpfWithHttpMessagesAsync(cpf, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
