// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace BNE.WebServices.API.Client
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Vagas.
    /// </summary>
    public static partial class VagasExtensions
    {
            /// <summary>
            /// Recupera a lista de vagas cadastradas para a api key informada
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado para acesso às vagas da empresa. As vagas retornadas
            /// serão filtradas baseadas nas informações presentes na APIKey passada.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pagina'>
            /// Página que deve ser retornada. A primeira página é "1".
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Número de registros a ser retornado por página. Default: 10
            /// </param>
            /// <param name='somenteMinhasVagas'>
            /// Se true, retorna somente as vagas que foram anunciadas pelo CPF presente
            /// na ApiKey. Se false, retorna as vagas cadastradas para a empresa
            /// informada no APIKey.
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo de vínculo utilizado para filtrar as vagas. Possible values include:
            /// 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio', 'Freelancer', 'Temporario'
            /// </param>
            /// <param name='statusVaga'>
            /// Status da vaga. Possible values include: 'EmPublicacao', 'Ativa',
            /// 'Arquivada', 'Inativa'
            /// </param>
            public static ResultadoPaginadoVagaEmpresa GetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVaga(this IVagas operations, int? pagina = default(int?), int? registrosPorPagina = default(int?), bool? somenteMinhasVagas = default(bool?), string tipoVinculo = default(string), string statusVaga = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).GetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaAsync(pagina, registrosPorPagina, somenteMinhasVagas, tipoVinculo, statusVaga), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera a lista de vagas cadastradas para a api key informada
            /// </summary>
            /// <remarks>
            /// Endpoint utilizado para acesso às vagas da empresa. As vagas retornadas
            /// serão filtradas baseadas nas informações presentes na APIKey passada.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pagina'>
            /// Página que deve ser retornada. A primeira página é "1".
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Número de registros a ser retornado por página. Default: 10
            /// </param>
            /// <param name='somenteMinhasVagas'>
            /// Se true, retorna somente as vagas que foram anunciadas pelo CPF presente
            /// na ApiKey. Se false, retorna as vagas cadastradas para a empresa
            /// informada no APIKey.
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo de vínculo utilizado para filtrar as vagas. Possible values include:
            /// 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio', 'Freelancer', 'Temporario'
            /// </param>
            /// <param name='statusVaga'>
            /// Status da vaga. Possible values include: 'EmPublicacao', 'Ativa',
            /// 'Arquivada', 'Inativa'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPaginadoVagaEmpresa> GetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaAsync(this IVagas operations, int? pagina = default(int?), int? registrosPorPagina = default(int?), bool? somenteMinhasVagas = default(bool?), string tipoVinculo = default(string), string statusVaga = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBypaginaregistrosPorPaginasomenteMinhasVagastipoVinculostatusVagaWithHttpMessagesAsync(pagina, registrosPorPagina, somenteMinhasVagas, tipoVinculo, statusVaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Pesquisa de vagas
            /// </summary>
            /// <remarks>
            /// Endpoint para pesquisa de vagas.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pagina'>
            /// Página a ser retornada. Iniciando em 1.
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Número de registros por página
            /// </param>
            /// <param name='query'>
            /// Pesquisa textual
            /// </param>
            /// <param name='salarioMinimo'>
            /// Salário mínimo oferecido pela vaga
            /// </param>
            /// <param name='salarioMaximo'>
            /// Salário máximo oferecido pela vaga
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo de vínculo desejado
            /// </param>
            /// <param name='funcao'>
            /// Funcão da vaga
            /// </param>
            /// <param name='area'>
            /// Área de atuação
            /// </param>
            /// <param name='escolaridade'>
            /// Escolaridade
            /// </param>
            /// <param name='deficiencia'>
            /// Deficiência para vagas BNE
            /// </param>
            /// <param name='disponibilidade'>
            /// Disponibilidade requerida para a vaga
            /// </param>
            /// <param name='siglaEstado'>
            /// Nomes das cidades desejadas
            /// </param>
            /// <param name='nomeCidade'>
            /// Nomes das cidades desejadas
            /// </param>
            /// <param name='empresa'>
            /// Nomes das empresas anunciantes
            /// </param>
            /// <param name='dataInicio'>
            /// Limite inferior para a abertura da vaga
            /// </param>
            /// <param name='dataFim'>
            /// Limite superior para a abertura da vaga
            /// </param>
            /// <param name='idOrigem'>
            /// Origem das vagas, empresas que possuem STC
            /// </param>
            /// <param name='oportunidade'>
            /// Trazer oportunidade (vagas abertas a mais de 60 dias)
            /// </param>
            /// <param name='ordenacao'>
            /// Ordenação ex: "Dta_Abertura asc, Des_Funcao desc"
            /// </param>
            /// <param name='curso'>
            /// Cursos pesquisados com like
            /// </param>
            /// <param name='idCurso'>
            /// Pesquisa acertiva dos curso
            /// </param>
            /// <param name='curriculo'>
            /// Curriculo do BNE - para não trazer as vagas da empresa que o candidato
            /// bloqueou.
            /// </param>
            /// <param name='ofereceCurso'>
            /// Vagas de empresa que oferecem curso
            /// </param>
            /// <param name='funcaoAgrupadora'>
            /// Vai retoranar as vagas com funções similares a pesquisada.
            /// </param>
            /// <param name='cidadeRegiao'>
            /// Alem das vaga da cidade ira trazer as vagas da região metropolitana.
            /// </param>
            /// <param name='idfFilial'>
            /// Buscar vagas da filial
            /// </param>
            /// <param name='confidencial'>
            /// Mostrar vagas Confidenciais (vaga de Empresas que optaram a não aparecer
            /// como anunciante na vaga)
            /// </param>
            /// <param name='campanha'>
            /// Vaga de campanha
            /// </param>
            /// <param name='usuarioFilial'>
            /// Quem Anunciou a vaga.
            /// </param>
            /// <param name='facetField'>
            /// Campos para os quais a totalização deve ser retornada
            /// </param>
            public static ResultadoPesquisaVaga GetBypaginaregistrosPorPaginaquerysalarioMinimosalarioMaximotipoVinculofuncaoareaescolaridadedeficienciadisponibilidadesiglaEstadonomeCidadeempresadataIniciodataFimidOrigemoportunidadeordenacaocursoidCursocurriculoofereceCursofuncaoAgrupadoracidadeRegiaoidfFilialconfidencialcampanhausuarioFilialfacetField(this IVagas operations, int? pagina = default(int?), int? registrosPorPagina = default(int?), string query = default(string), double? salarioMinimo = default(double?), double? salarioMaximo = default(double?), System.Collections.Generic.IList<string> tipoVinculo = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> funcao = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> area = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> escolaridade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> deficiencia = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> disponibilidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> siglaEstado = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nomeCidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> empresa = default(System.Collections.Generic.IList<string>), System.DateTime? dataInicio = default(System.DateTime?), System.DateTime? dataFim = default(System.DateTime?), System.Collections.Generic.IList<int?> idOrigem = default(System.Collections.Generic.IList<int?>), bool? oportunidade = default(bool?), string ordenacao = default(string), System.Collections.Generic.IList<string> curso = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<int?> idCurso = default(System.Collections.Generic.IList<int?>), int? curriculo = default(int?), bool? ofereceCurso = default(bool?), int? funcaoAgrupadora = default(int?), int? cidadeRegiao = default(int?), int? idfFilial = default(int?), bool? confidencial = default(bool?), bool? campanha = default(bool?), System.Collections.Generic.IList<int?> usuarioFilial = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<string> facetField = default(System.Collections.Generic.IList<string>))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).GetBypaginaregistrosPorPaginaquerysalarioMinimosalarioMaximotipoVinculofuncaoareaescolaridadedeficienciadisponibilidadesiglaEstadonomeCidadeempresadataIniciodataFimidOrigemoportunidadeordenacaocursoidCursocurriculoofereceCursofuncaoAgrupadoracidadeRegiaoidfFilialconfidencialcampanhausuarioFilialfacetFieldAsync(pagina, registrosPorPagina, query, salarioMinimo, salarioMaximo, tipoVinculo, funcao, area, escolaridade, deficiencia, disponibilidade, siglaEstado, nomeCidade, empresa, dataInicio, dataFim, idOrigem, oportunidade, ordenacao, curso, idCurso, curriculo, ofereceCurso, funcaoAgrupadora, cidadeRegiao, idfFilial, confidencial, campanha, usuarioFilial, facetField), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pesquisa de vagas
            /// </summary>
            /// <remarks>
            /// Endpoint para pesquisa de vagas.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pagina'>
            /// Página a ser retornada. Iniciando em 1.
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Número de registros por página
            /// </param>
            /// <param name='query'>
            /// Pesquisa textual
            /// </param>
            /// <param name='salarioMinimo'>
            /// Salário mínimo oferecido pela vaga
            /// </param>
            /// <param name='salarioMaximo'>
            /// Salário máximo oferecido pela vaga
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo de vínculo desejado
            /// </param>
            /// <param name='funcao'>
            /// Funcão da vaga
            /// </param>
            /// <param name='area'>
            /// Área de atuação
            /// </param>
            /// <param name='escolaridade'>
            /// Escolaridade
            /// </param>
            /// <param name='deficiencia'>
            /// Deficiência para vagas BNE
            /// </param>
            /// <param name='disponibilidade'>
            /// Disponibilidade requerida para a vaga
            /// </param>
            /// <param name='siglaEstado'>
            /// Nomes das cidades desejadas
            /// </param>
            /// <param name='nomeCidade'>
            /// Nomes das cidades desejadas
            /// </param>
            /// <param name='empresa'>
            /// Nomes das empresas anunciantes
            /// </param>
            /// <param name='dataInicio'>
            /// Limite inferior para a abertura da vaga
            /// </param>
            /// <param name='dataFim'>
            /// Limite superior para a abertura da vaga
            /// </param>
            /// <param name='idOrigem'>
            /// Origem das vagas, empresas que possuem STC
            /// </param>
            /// <param name='oportunidade'>
            /// Trazer oportunidade (vagas abertas a mais de 60 dias)
            /// </param>
            /// <param name='ordenacao'>
            /// Ordenação ex: "Dta_Abertura asc, Des_Funcao desc"
            /// </param>
            /// <param name='curso'>
            /// Cursos pesquisados com like
            /// </param>
            /// <param name='idCurso'>
            /// Pesquisa acertiva dos curso
            /// </param>
            /// <param name='curriculo'>
            /// Curriculo do BNE - para não trazer as vagas da empresa que o candidato
            /// bloqueou.
            /// </param>
            /// <param name='ofereceCurso'>
            /// Vagas de empresa que oferecem curso
            /// </param>
            /// <param name='funcaoAgrupadora'>
            /// Vai retoranar as vagas com funções similares a pesquisada.
            /// </param>
            /// <param name='cidadeRegiao'>
            /// Alem das vaga da cidade ira trazer as vagas da região metropolitana.
            /// </param>
            /// <param name='idfFilial'>
            /// Buscar vagas da filial
            /// </param>
            /// <param name='confidencial'>
            /// Mostrar vagas Confidenciais (vaga de Empresas que optaram a não aparecer
            /// como anunciante na vaga)
            /// </param>
            /// <param name='campanha'>
            /// Vaga de campanha
            /// </param>
            /// <param name='usuarioFilial'>
            /// Quem Anunciou a vaga.
            /// </param>
            /// <param name='facetField'>
            /// Campos para os quais a totalização deve ser retornada
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPesquisaVaga> GetBypaginaregistrosPorPaginaquerysalarioMinimosalarioMaximotipoVinculofuncaoareaescolaridadedeficienciadisponibilidadesiglaEstadonomeCidadeempresadataIniciodataFimidOrigemoportunidadeordenacaocursoidCursocurriculoofereceCursofuncaoAgrupadoracidadeRegiaoidfFilialconfidencialcampanhausuarioFilialfacetFieldAsync(this IVagas operations, int? pagina = default(int?), int? registrosPorPagina = default(int?), string query = default(string), double? salarioMinimo = default(double?), double? salarioMaximo = default(double?), System.Collections.Generic.IList<string> tipoVinculo = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> funcao = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> area = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> escolaridade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> deficiencia = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> disponibilidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> siglaEstado = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nomeCidade = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> empresa = default(System.Collections.Generic.IList<string>), System.DateTime? dataInicio = default(System.DateTime?), System.DateTime? dataFim = default(System.DateTime?), System.Collections.Generic.IList<int?> idOrigem = default(System.Collections.Generic.IList<int?>), bool? oportunidade = default(bool?), string ordenacao = default(string), System.Collections.Generic.IList<string> curso = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<int?> idCurso = default(System.Collections.Generic.IList<int?>), int? curriculo = default(int?), bool? ofereceCurso = default(bool?), int? funcaoAgrupadora = default(int?), int? cidadeRegiao = default(int?), int? idfFilial = default(int?), bool? confidencial = default(bool?), bool? campanha = default(bool?), System.Collections.Generic.IList<int?> usuarioFilial = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<string> facetField = default(System.Collections.Generic.IList<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBypaginaregistrosPorPaginaquerysalarioMinimosalarioMaximotipoVinculofuncaoareaescolaridadedeficienciadisponibilidadesiglaEstadonomeCidadeempresadataIniciodataFimidOrigemoportunidadeordenacaocursoidCursocurriculoofereceCursofuncaoAgrupadoracidadeRegiaoidfFilialconfidencialcampanhausuarioFilialfacetFieldWithHttpMessagesAsync(pagina, registrosPorPagina, query, salarioMinimo, salarioMaximo, tipoVinculo, funcao, area, escolaridade, deficiencia, disponibilidade, siglaEstado, nomeCidade, empresa, dataInicio, dataFim, idOrigem, oportunidade, ordenacao, curso, idCurso, curriculo, ofereceCurso, funcaoAgrupadora, cidadeRegiao, idfFilial, confidencial, campanha, usuarioFilial, facetField, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            public static VagaEmpresa GetByid(this IVagas operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).GetByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VagaEmpresa> GetByidAsync(this IVagas operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            public static VagaEmpresa GetEmpresaByid(this IVagas operations, int id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).GetEmpresaByidAsync(id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VagaEmpresa> GetEmpresaByidAsync(this IVagas operations, int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetEmpresaByidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recupera os dados da empresa que anunciou a vaga
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            public static DadosEmpresa DadosDaEmpresaByidVaga(this IVagas operations, int idVaga)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).DadosDaEmpresaByidVagaAsync(idVaga), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera os dados da empresa que anunciou a vaga
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DadosEmpresa> DadosDaEmpresaByidVagaAsync(this IVagas operations, int idVaga, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DadosDaEmpresaByidVagaWithHttpMessagesAsync(idVaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            /// <param name='novoStatusVaga'>
            /// Status a ser assumido pela vaga.
            /// O status "Inativa", irá exibir a vaga como oportunidade para o
            /// candidato, informando que a vaga está fechada, mas a empresa aceita
            /// receber currículos com o perfil da vaga.
            /// Para o status "Arquivada", A vaga deixará de ser exibida para
            /// os candidatos. Possible values include: 'EmPublicacao', 'Ativa',
            /// 'Arquivada', 'Inativa'
            /// </param>
            public static VagaEmpresa AtualizarStatusByidnovoStatusVaga(this IVagas operations, int id, string novoStatusVaga)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).AtualizarStatusByidnovoStatusVagaAsync(id, novoStatusVaga), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recupera uma vaga baseada em seu ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id da Vaga a ser recuperada
            /// </param>
            /// <param name='novoStatusVaga'>
            /// Status a ser assumido pela vaga.
            /// O status "Inativa", irá exibir a vaga como oportunidade para o
            /// candidato, informando que a vaga está fechada, mas a empresa aceita
            /// receber currículos com o perfil da vaga.
            /// Para o status "Arquivada", A vaga deixará de ser exibida para
            /// os candidatos. Possible values include: 'EmPublicacao', 'Ativa',
            /// 'Arquivada', 'Inativa'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VagaEmpresa> AtualizarStatusByidnovoStatusVagaAsync(this IVagas operations, int id, string novoStatusVaga, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AtualizarStatusByidnovoStatusVagaWithHttpMessagesAsync(id, novoStatusVaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Realiza a candidatura a uma vaga.
            /// </summary>
            /// <remarks>
            /// A candidatura será efetuada para o usuário informado na ApiKey
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// Identificador da vaga
            /// </param>
            /// <param name='candidatura'>
            /// Informações adicionais para a candidatura
            /// </param>
            public static object CandidatarByidVagacandidatura(this IVagas operations, int idVaga, Candidatura candidatura)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).CandidatarByidVagacandidaturaAsync(idVaga, candidatura), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Realiza a candidatura a uma vaga.
            /// </summary>
            /// <remarks>
            /// A candidatura será efetuada para o usuário informado na ApiKey
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// Identificador da vaga
            /// </param>
            /// <param name='candidatura'>
            /// Informações adicionais para a candidatura
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> CandidatarByidVagacandidaturaAsync(this IVagas operations, int idVaga, Candidatura candidatura, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CandidatarByidVagacandidaturaWithHttpMessagesAsync(idVaga, candidatura, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Consulta a vagas candidatadas.
            /// </summary>
            /// <remarks>
            /// As vagas serão retornadas para o usuário informado na ApiKey
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo do vínculo das vagas candidatadas. Possible values include:
            /// 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio', 'Freelancer', 'Temporario'
            /// </param>
            /// <param name='pagina'>
            /// Pagina a ser retornada
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Informações adicionais para a candidatura
            /// </param>
            public static ResultadoPaginadoVaga CandidatadasBytipoVinculopaginaregistrosPorPagina(this IVagas operations, string tipoVinculo = default(string), int? pagina = default(int?), int? registrosPorPagina = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).CandidatadasBytipoVinculopaginaregistrosPorPaginaAsync(tipoVinculo, pagina, registrosPorPagina), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Consulta a vagas candidatadas.
            /// </summary>
            /// <remarks>
            /// As vagas serão retornadas para o usuário informado na ApiKey
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tipoVinculo'>
            /// Tipo do vínculo das vagas candidatadas. Possible values include:
            /// 'Aprendiz', 'Autonomo', 'Efetivo', 'Estagio', 'Freelancer', 'Temporario'
            /// </param>
            /// <param name='pagina'>
            /// Pagina a ser retornada
            /// </param>
            /// <param name='registrosPorPagina'>
            /// Informações adicionais para a candidatura
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoPaginadoVaga> CandidatadasBytipoVinculopaginaregistrosPorPaginaAsync(this IVagas operations, string tipoVinculo = default(string), int? pagina = default(int?), int? registrosPorPagina = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CandidatadasBytipoVinculopaginaregistrosPorPaginaWithHttpMessagesAsync(tipoVinculo, pagina, registrosPorPagina, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cadastra uma nova vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaga'>
            /// Vaga que será publicada na filial do usuário.
            /// </param>
            public static ResultadoVagaDTO SalvarByvaga(this IVagas operations, VagaEmpresa vaga)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).SalvarByvagaAsync(vaga), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cadastra uma nova vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaga'>
            /// Vaga que será publicada na filial do usuário.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoVagaDTO> SalvarByvagaAsync(this IVagas operations, VagaEmpresa vaga, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SalvarByvagaWithHttpMessagesAsync(vaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Atualiza uma vaga já cadastrada.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// Identificador da vaga a ser atualizada
            /// </param>
            /// <param name='vaga'>
            /// Vaga que será publicada na filial do usuário.
            /// </param>
            public static ResultadoVagaDTO SalvarByidVagavaga(this IVagas operations, int idVaga, VagaEmpresa vaga)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).SalvarByidVagavagaAsync(idVaga, vaga), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Atualiza uma vaga já cadastrada.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='idVaga'>
            /// Identificador da vaga a ser atualizada
            /// </param>
            /// <param name='vaga'>
            /// Vaga que será publicada na filial do usuário.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoVagaDTO> SalvarByidVagavagaAsync(this IVagas operations, int idVaga, VagaEmpresa vaga, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SalvarByidVagavagaWithHttpMessagesAsync(idVaga, vaga, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os minicurrículos dos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            public static ResultadoCandidatosDTOMiniCurriculo ObterMiniCurriculosCandidatosBycodigoVagapagina(this IVagas operations, int codigoVaga, int? pagina = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterMiniCurriculosCandidatosBycodigoVagapaginaAsync(codigoVaga, pagina), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os minicurrículos dos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCandidatosDTOMiniCurriculo> ObterMiniCurriculosCandidatosBycodigoVagapaginaAsync(this IVagas operations, int codigoVaga, int? pagina = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterMiniCurriculosCandidatosBycodigoVagapaginaWithHttpMessagesAsync(codigoVaga, pagina, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os currículos completos dos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            public static ResultadoCandidatosDTOResultadoPesquisaCurriculoCompleto ObterCurriculosCandidatosBycodigoVagapagina(this IVagas operations, int codigoVaga, int? pagina = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterCurriculosCandidatosBycodigoVagapaginaAsync(codigoVaga, pagina), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os currículos completos dos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCandidatosDTOResultadoPesquisaCurriculoCompleto> ObterCurriculosCandidatosBycodigoVagapaginaAsync(this IVagas operations, int codigoVaga, int? pagina = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterCurriculosCandidatosBycodigoVagapaginaWithHttpMessagesAsync(codigoVaga, pagina, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            /// <param name='returnType'>
            /// Formato desejado para os currículos candidatos. O valor padrão é
            /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
            /// 'CurriculoCompleto'
            /// </param>
            public static ResultadoCandidatosDTOCurriculo ObterCandidatosBycodigoVagapaginareturnType(this IVagas operations, int codigoVaga, int? pagina = default(int?), string returnType = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterCandidatosBycodigoVagapaginareturnTypeAsync(codigoVaga, pagina, returnType), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='pagina'>
            /// Número da página que deseja acessar. O valor padrão é 1
            /// </param>
            /// <param name='returnType'>
            /// Formato desejado para os currículos candidatos. O valor padrão é
            /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
            /// 'CurriculoCompleto'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResultadoCandidatosDTOCurriculo> ObterCandidatosBycodigoVagapaginareturnTypeAsync(this IVagas operations, int codigoVaga, int? pagina = default(int?), string returnType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterCandidatosBycodigoVagapaginareturnTypeWithHttpMessagesAsync(codigoVaga, pagina, returnType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os minicurriculos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            public static System.Collections.Generic.IList<MiniCurriculo> ObterUltimosMiniCurriculosCandidatosBycodigoVagadata(this IVagas operations, int codigoVaga, System.DateTime data)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterUltimosMiniCurriculosCandidatosBycodigoVagadataAsync(codigoVaga, data), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os minicurriculos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<MiniCurriculo>> ObterUltimosMiniCurriculosCandidatosBycodigoVagadataAsync(this IVagas operations, int codigoVaga, System.DateTime data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterUltimosMiniCurriculosCandidatosBycodigoVagadataWithHttpMessagesAsync(codigoVaga, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os currículos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            public static System.Collections.Generic.IList<ResultadoPesquisaCurriculoCompleto> ObterUltimosCurriculosCandidatosBycodigoVagadata(this IVagas operations, int codigoVaga, System.DateTime data)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterUltimosCurriculosCandidatosBycodigoVagadataAsync(codigoVaga, data), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os currículos candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<ResultadoPesquisaCurriculoCompleto>> ObterUltimosCurriculosCandidatosBycodigoVagadataAsync(this IVagas operations, int codigoVaga, System.DateTime data, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterUltimosCurriculosCandidatosBycodigoVagadataWithHttpMessagesAsync(codigoVaga, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lista os candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            /// <param name='returnType'>
            /// Formato desejado para os currículos candidatos. O valor padrão é
            /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
            /// 'CurriculoCompleto'
            /// </param>
            public static System.Collections.Generic.IList<Curriculo> ObterUltimosCandidatosBycodigoVagadatareturnType(this IVagas operations, int codigoVaga, System.DateTime data, string returnType = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IVagas)s).ObterUltimosCandidatosBycodigoVagadatareturnTypeAsync(codigoVaga, data, returnType), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lista os candidatos de uma determinada vaga.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codigoVaga'>
            /// Código da vaga.
            /// </param>
            /// <param name='data'>
            /// Data e hora a partir de qual as candidaturas devem ser recuperadas.
            /// </param>
            /// <param name='returnType'>
            /// Formato desejado para os currículos candidatos. O valor padrão é
            /// 'Minicurriculo'. Possible values include: 'MiniCurriculo',
            /// 'CurriculoCompleto'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Curriculo>> ObterUltimosCandidatosBycodigoVagadatareturnTypeAsync(this IVagas operations, int codigoVaga, System.DateTime data, string returnType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ObterUltimosCandidatosBycodigoVagadatareturnTypeWithHttpMessagesAsync(codigoVaga, data, returnType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
